'use client'

import Modal from '@/components/ui/Modal'
import StatusBadge from '@/components/ui/StatusBadge'
import { useToast } from '@/components/ui/Toast'

interface Card {
  id: string
  card_number_mask: string
  card_bin: string
  card_type: string
  status: string
  assigned_to: string | null
  exp_month: number
  exp_year: number
  daily_limit: number | null
  full_card_number?: string
  full_cvv?: string
}

interface BankAccount {
  id: string
  holder_name: string
  account_number: string
  balance: number
  currency: string
  is_active: boolean
  balance_updated_at: string
  last_updated: string
  cards_available: boolean
  cards: Card[]
  sort_code?: string
  bank_url?: string
  login_password?: string
}

interface ManagerBankModalsProps {
  // Edit Card Modal
  showEditCardModal: boolean
  setShowEditCardModal: (show: boolean) => void
  editingCard: Card | null
  setEditingCard: (card: Card | null) => void
  creating: boolean
  handleUpdateCard: () => Promise<void>

  // Card Details Modal
  showCardDetailsModal: boolean
  setShowCardDetailsModal: (show: boolean) => void
  viewingCard: Card | null
  setViewingCard: (card: Card | null) => void
  cardSecrets: {card_number: string, cvv: string} | null
  setCardSecrets: (secrets: {card_number: string, cvv: string} | null) => void

  // Edit Account Modal
  showEditAccountModal: boolean
  setShowEditAccountModal: (show: boolean) => void
  editingAccount: BankAccount | null
  setEditingAccount: (account: BankAccount | null) => void
  handleUpdateAccount: () => Promise<void>

  // Balance Edit Modal
  showBalanceEditModal: boolean
  setShowBalanceEditModal: (show: boolean) => void
  editingBalance: BankAccount | null
  setEditingBalance: (account: BankAccount | null) => void
  newBalance: number
  setNewBalance: (balance: number) => void
  balanceComment: string
  setBalanceComment: (comment: string) => void
  handleUpdateBalance: () => Promise<void>
  getCurrencySymbol: (currency: string) => string

  // Global History Modal
  showGlobalHistoryModal: boolean
  setShowGlobalHistoryModal: (show: boolean) => void
  globalHistory: any[]
  setGlobalHistory: (history: any[]) => void
  loadingHistory: boolean

  // Account History Modal
  showAccountHistoryModal: boolean
  setShowAccountHistoryModal: (show: boolean) => void
  viewingAccountHistory: BankAccount | null
  setViewingAccountHistory: (account: BankAccount | null) => void
  accountHistory: any[]
  setAccountHistory: (history: any[]) => void
}

export default function ManagerBankModals({
  showEditCardModal,
  setShowEditCardModal,
  editingCard,
  setEditingCard,
  creating,
  handleUpdateCard,
  showCardDetailsModal,
  setShowCardDetailsModal,
  viewingCard,
  setViewingCard,
  cardSecrets,
  setCardSecrets,
  showEditAccountModal,
  setShowEditAccountModal,
  editingAccount,
  setEditingAccount,
  handleUpdateAccount,
  showBalanceEditModal,
  setShowBalanceEditModal,
  editingBalance,
  setEditingBalance,
  newBalance,
  setNewBalance,
  balanceComment,
  setBalanceComment,
  handleUpdateBalance,
  getCurrencySymbol,
  showGlobalHistoryModal,
  setShowGlobalHistoryModal,
  globalHistory,
  setGlobalHistory,
  loadingHistory,
  showAccountHistoryModal,
  setShowAccountHistoryModal,
  viewingAccountHistory,
  setViewingAccountHistory,
  accountHistory,
  setAccountHistory
}: ManagerBankModalsProps) {
  const { addToast } = useToast()

  return (
    <>
      {/* Modal —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã */}
      <Modal
        isOpen={showEditCardModal}
        onClose={() => {
          setShowEditCardModal(false)
          setEditingCard(null)
        }}
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É"
        size="lg"
      >
        {editingCard && (
          <div className="space-y-4">
            <div className="bg-info-50 border border-info-200 rounded-lg p-3">
              <div className="text-sm text-info-800">
                <p className="font-medium text-gray-800">üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã</p>
                <p className="text-gray-700">–ö–∞—Ä—Ç–∞: {editingCard.card_number_mask}</p>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="form-label">–ü–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
                <input
                  type="text"
                  value={editingCard.full_card_number || ''}
                  onChange={(e) => setEditingCard({...editingCard, full_card_number: e.target.value})}
                  className="form-input font-mono"
                  placeholder="1234 5678 9012 3456"
                  maxLength={19}
                />
              </div>

              <div>
                <label className="form-label">CVV</label>
                <input
                  type="text"
                  value={editingCard.full_cvv || ''}
                  onChange={(e) => setEditingCard({...editingCard, full_cvv: e.target.value})}
                  className="form-input font-mono text-center"
                  placeholder="123"
                  maxLength={4}
                />
              </div>
            </div>

            <div>
              <label className="form-label">BIN –∫–æ–¥</label>
              <input
                type="text"
                value={editingCard.card_bin}
                onChange={(e) => setEditingCard({...editingCard, card_bin: e.target.value})}
                className="form-input"
                placeholder="123456"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="form-label">–ú–µ—Å—è—Ü –∏—Å—Ç–µ—á–µ–Ω–∏—è</label>
                <select
                  value={editingCard.exp_month}
                  onChange={(e) => setEditingCard({...editingCard, exp_month: parseInt(e.target.value)})}
                  className="form-input"
                >
                  {Array.from({length: 12}, (_, i) => i + 1).map(month => (
                    <option key={month} value={month}>
                      {month.toString().padStart(2, '0')}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="form-label">–ì–æ–¥ –∏—Å—Ç–µ—á–µ–Ω–∏—è</label>
                <select
                  value={editingCard.exp_year}
                  onChange={(e) => setEditingCard({...editingCard, exp_year: parseInt(e.target.value)})}
                  className="form-input"
                >
                  {Array.from({length: 10}, (_, i) => new Date().getFullYear() + i).map(year => (
                    <option key={year} value={year}>
                      {year}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="form-label">–¢–∏–ø –∫–∞—Ä—Ç—ã</label>
                <select
                  value={editingCard.card_type}
                  onChange={(e) => setEditingCard({...editingCard, card_type: e.target.value})}
                  className="form-input"
                >
                  <option value="grey">‚ö´ –°–µ—Ä–∞—è</option>
                  <option value="pink">üå∏ –†–æ–∑–æ–≤–∞—è</option>
                </select>
              </div>

              <div>
                <label className="form-label">–°—Ç–∞—Ç—É—Å</label>
                <select
                  value={editingCard.status}
                  onChange={(e) => setEditingCard({...editingCard, status: e.target.value})}
                  className="form-input"
                >
                  <option value="active">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞</option>
                  <option value="blocked">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</option>
                  <option value="inactive">‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∞</option>
                </select>
              </div>
            </div>

            {editingCard.card_type === 'pink' && (
              <div>
                <label className="form-label">–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ($)</label>
                <input
                  type="number"
                  value={editingCard.daily_limit || 0}
                  onChange={(e) => setEditingCard({...editingCard, daily_limit: parseFloat(e.target.value) || 0})}
                  className="form-input"
                  placeholder="1000.00"
                  min="0"
                  step="0.01"
                />
              </div>
            )}

            <div className="flex justify-end space-x-3 pt-4">
              <button
                onClick={() => setShowEditCardModal(false)}
                className="btn-secondary"
                disabled={creating}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleUpdateCard}
                className="btn-primary"
                disabled={creating}
              >
                {creating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
              </button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã */}
      <Modal
        isOpen={showCardDetailsModal}
        onClose={() => {
          setShowCardDetailsModal(false)
          setViewingCard(null)
          setCardSecrets(null)
        }}
        title="–ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã"
        size="md"
      >
        {viewingCard && cardSecrets && (
          <div className="space-y-4">
            <div className="bg-warning-50 border border-warning-200 rounded-lg p-3">
              <div className="text-sm text-warning-800">
                <p className="font-medium">‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
                <p>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º</p>
              </div>
            </div>

            <div className="grid grid-cols-1 gap-4">
              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-3">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">–¢–∏–ø:</span>
                    <span>{viewingCard.card_type === 'pink' ? 'üå∏ –†–æ–∑–æ–≤–∞—è' : '‚ö´ –°–µ—Ä–∞—è'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–°—Ç–∞—Ç—É—Å:</span>
                    <StatusBadge status={viewingCard.status} size="sm" />
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">BIN:</span>
                    <span className="font-mono">{viewingCard.card_bin}</span>
                  </div>
                  {viewingCard.daily_limit && (
                    <div className="flex justify-between">
                      <span className="text-gray-600">–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:</span>
                      <span>${viewingCard.daily_limit}</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="bg-gray-50 rounded-lg p-4">
                <h4 className="font-medium text-gray-900 mb-3">–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs font-medium text-gray-700 mb-1">
                      –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
                    </label>
                    <div className="flex items-center space-x-2">
                      <input
                        type="text"
                        value={cardSecrets.card_number}
                        readOnly
                        className="form-input font-mono text-lg"
                      />
                      <button
                        onClick={() => {
                          navigator.clipboard.writeText(cardSecrets.card_number)
                          addToast({ type: 'success', title: '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω' })
                        }}
                        className="text-primary-600 hover:text-primary-800"
                        title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä"
                      >
                        üìã
                      </button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        CVV
                      </label>
                      <div className="flex items-center space-x-2">
                        <input
                          type="text"
                          value={cardSecrets.cvv}
                          readOnly
                          className="form-input font-mono text-center"
                        />
                        <button
                          onClick={() => {
                            navigator.clipboard.writeText(cardSecrets.cvv)
                            addToast({ type: 'success', title: 'CVV —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω' })
                          }}
                          className="text-primary-600 hover:text-primary-800"
                          title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å CVV"
                        >
                          üìã
                        </button>
                      </div>
                    </div>

                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                      </label>
                      <input
                        type="text"
                        value={`${viewingCard.exp_month.toString().padStart(2, '0')}/${viewingCard.exp_year}`}
                        readOnly
                        className="form-input font-mono text-center"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {viewingCard.assigned_to && (
                <div className="bg-info-50 border border-info-200 rounded-lg p-3">
                  <div className="text-sm text-info-800">
                    <p className="font-medium">üë§ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ</p>
                    <p>–ö–∞—Ä—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ Junior –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</p>
                  </div>
                </div>
              )}
            </div>

            <div className="flex justify-end pt-4">
              <button
                onClick={() => {
                  setShowCardDetailsModal(false)
                  setViewingCard(null)
                  setCardSecrets(null)
                }}
                className="btn-secondary"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ */}
      <Modal
        isOpen={showEditAccountModal}
        onClose={() => {
          setShowEditAccountModal(false)
          setEditingAccount(null)
        }}
        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
        size="md"
      >
        {editingAccount && (
          <div className="space-y-4">
            <div className="bg-info-50 border border-info-200 rounded-lg p-3">
              <div className="text-sm text-info-800">
                <p className="font-medium text-gray-800">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</p>
                <p className="text-gray-700">–ê–∫–∫–∞—É–Ω—Ç: {editingAccount.holder_name}</p>
              </div>
            </div>

            <div>
              <label className="form-label">–ò–º—è –¥–µ—Ä–∂–∞—Ç–µ–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ *</label>
              <input
                type="text"
                value={editingAccount.holder_name}
                onChange={(e) => setEditingAccount({...editingAccount, holder_name: e.target.value})}
                className="form-input"
                placeholder="John Doe"
                required
              />
            </div>

            <div>
              <label className="form-label">Acc number</label>
              <input
                type="text"
                value={editingAccount.account_number || ''}
                onChange={(e) => setEditingAccount({...editingAccount, account_number: e.target.value})}
                className="form-input"
                placeholder="1234567890"
              />
            </div>

            <div>
              <label className="form-label">Sort Code</label>
              <input
                type="text"
                value={editingAccount.sort_code || ''}
                onChange={(e) => setEditingAccount({...editingAccount, sort_code: e.target.value})}
                className="form-input"
                placeholder="12-34-56"
              />
            </div>

            <div>
              <label className="form-label">–°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–Ω–∫</label>
              <input
                type="url"
                value={editingAccount.bank_url || ''}
                onChange={(e) => setEditingAccount({...editingAccount, bank_url: e.target.value})}
                className="form-input"
                placeholder="https://example-bank.com"
              />
            </div>

            <div>
              <label className="form-label">–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞</label>
              <input
                type="password"
                value={editingAccount.login_password || ''}
                onChange={(e) => setEditingAccount({...editingAccount, login_password: e.target.value})}
                className="form-input"
                placeholder="–ü–∞—Ä–æ–ª—å –¥–ª—è –æ–Ω–ª–∞–π–Ω –±–∞–Ω–∫–∏–Ω–≥–∞"
              />
            </div>

            <div className="flex justify-end space-x-3 pt-4">
              <button
                onClick={() => setShowEditAccountModal(false)}
                className="btn-secondary"
                disabled={creating}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleUpdateAccount}
                className="btn-primary"
                disabled={creating || !editingAccount.holder_name.trim()}
              >
                {creating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
              </button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ */}
      <Modal
        isOpen={showBalanceEditModal}
        onClose={() => {
          setShowBalanceEditModal(false)
          setEditingBalance(null)
        }}
        title="–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
        size="md"
      >
        {editingBalance && (
          <div className="space-y-4">
            <div className="bg-info-50 border border-info-200 rounded-lg p-3">
              <div className="text-sm text-info-800">
                <p className="font-medium text-gray-800">üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</p>
                <p className="text-gray-700">–ê–∫–∫–∞—É–Ω—Ç: {editingBalance.holder_name}</p>
                <p className="text-gray-700">–¢–µ–∫—É—â–∏–π: {getCurrencySymbol(editingBalance.currency || 'USD')}{editingBalance.balance.toFixed(2)}</p>
              </div>
            </div>

            <div>
              <label className="form-label">–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å</label>
              <div className="flex items-center space-x-2">
                <span className="text-lg font-medium">{getCurrencySymbol(editingBalance.currency || 'USD')}</span>
                <input
                  type="number"
                  value={newBalance}
                  onChange={(e) => setNewBalance(parseFloat(e.target.value) || 0)}
                  className="form-input flex-1"
                  placeholder="0.00"
                  min="0"
                  step="0.01"
                />
                <span className="text-sm text-gray-500">{editingBalance.currency}</span>
              </div>
            </div>

            <div>
              <label className="form-label">–ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è *</label>
              <textarea
                value={balanceComment}
                onChange={(e) => setBalanceComment(e.target.value)}
                className="form-input"
                placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞..."
                rows={3}
                required
              />
            </div>

            <div className="flex justify-end space-x-3 pt-4">
              <button
                onClick={() => setShowBalanceEditModal(false)}
                className="btn-secondary"
                disabled={creating}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleUpdateBalance}
                className="btn-primary"
                disabled={creating || !balanceComment.trim()}
              >
                {creating ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'}
              </button>
            </div>
          </div>
        )}
      </Modal>

      {/* Modal –æ–±—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ */}
      <Modal
        isOpen={showGlobalHistoryModal}
        onClose={() => {
          setShowGlobalHistoryModal(false)
          setGlobalHistory([])
        }}
        title="–û–±—â–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π"
        size="xl"
      >
        <div className="space-y-4">
          <div className="bg-info-50 border border-info-200 rounded-lg p-3">
            <div className="text-sm text-info-800">
              <p className="font-medium text-gray-800">üìö –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π</p>
              <p className="text-gray-700">–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–æ–≤, –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∫–∞—Ä—Ç, –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤</p>
            </div>
          </div>

          {loadingHistory ? (
            <div className="text-center py-8">
              <div className="animate-spin h-8 w-8 border-4 border-primary-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</p>
            </div>
          ) : globalHistory.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <p>–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø—É—Å—Ç–∞</p>
            </div>
          ) : (
            <div className="max-h-96 overflow-y-auto space-y-3">
              {globalHistory.map((entry, index) => (
                <div key={entry.id || index} className="border border-gray-200 rounded-lg p-3">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                          entry.action_type?.includes('card') 
                            ? 'bg-success-100 text-success-800' 
                            : entry.action_type?.includes('bank')
                            ? 'bg-warning-100 text-warning-800'
                            : entry.action_type?.includes('account')
                            ? 'bg-info-100 text-info-800'
                            : 'bg-primary-100 text-primary-800'
                        }`}>
                          {entry.action_type?.includes('card') && 'üÉè'}
                          {entry.action_type?.includes('bank') && 'üè¶'}
                          {entry.action_type?.includes('account') && 'üë§'}
                          {entry.action_type?.includes('balance') && 'üí∞'}
                          {' '}
                          {entry.entity_type?.charAt(0).toUpperCase() + entry.entity_type?.slice(1) || '–î–µ–π—Å—Ç–≤–∏–µ'}
                        </span>
                        <span className="text-sm font-medium text-gray-900">
                          {entry.action}
                        </span>
                      </div>
                      
                      <div className="text-xs text-gray-600 space-y-1">
                        <div>
                          <span className="font-medium">–û–±—ä–µ–∫—Ç:</span> {entry.entity_name}
                        </div>
                        {entry.entity_details && (
                          <div>
                            <span className="font-medium">–î–µ—Ç–∞–ª–∏:</span> 
                            {entry.entity_details.bank_name && ` –ë–∞–Ω–∫: ${entry.entity_details.bank_name}`}
                            {entry.entity_details.account_name && ` –ê–∫–∫–∞—É–Ω—Ç: ${entry.entity_details.account_name}`}
                            {entry.entity_details.card_type && ` –¢–∏–ø: ${entry.entity_details.card_type}`}
                          </div>
                        )}
                        <div>
                          <span className="font-medium">–í—ã–ø–æ–ª–Ω–∏–ª:</span> {entry.user.name} ({entry.user.role})
                        </div>
                        {entry.ip_address && (
                          <div>
                            <span className="font-medium">IP:</span> {entry.ip_address}
                          </div>
                        )}
                      </div>
                    </div>
                    
                    <div className="text-xs text-gray-500 text-right">
                      {new Date(entry.created_at).toLocaleString('ru-RU')}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          <div className="flex justify-end pt-4">
            <button
              onClick={() => setShowGlobalHistoryModal(false)}
              className="btn-secondary"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      </Modal>

      {/* Modal –∏—Å—Ç–æ—Ä–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ */}
      <Modal
        isOpen={showAccountHistoryModal}
        onClose={() => {
          setShowAccountHistoryModal(false)
          setViewingAccountHistory(null)
          setAccountHistory([])
        }}
        title="–ò—Å—Ç–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"
        size="lg"
      >
        {viewingAccountHistory && (
          <div className="space-y-4">
            <div className="bg-info-50 border border-info-200 rounded-lg p-3">
              <div className="text-sm text-info-800">
                <p className="font-medium text-gray-800">üìä –ò—Å—Ç–æ—Ä–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞</p>
                <p className="text-gray-700">–ê–∫–∫–∞—É–Ω—Ç: {viewingAccountHistory.holder_name}</p>
                <p className="text-gray-700">–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {getCurrencySymbol(viewingAccountHistory.currency || 'USD')}{viewingAccountHistory.balance.toFixed(2)}</p>
              </div>
            </div>

            {loadingHistory ? (
              <div className="text-center py-8">
                <div className="animate-spin h-8 w-8 border-4 border-primary-600 border-t-transparent rounded-full mx-auto mb-4"></div>
                <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</p>
              </div>
            ) : accountHistory.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                <p>–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>
              </div>
            ) : (
              <div className="max-h-96 overflow-y-auto space-y-3">
                {accountHistory.map((entry, index) => (
                  <div key={index} className="border border-gray-200 rounded-lg p-3">
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <div className="flex items-center space-x-2 mb-1">
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-800">
                            üí∞ –ë–∞–ª–∞–Ω—Å
                          </span>
                          <span className="text-sm font-medium text-gray-900">
                            {entry.change_reason || '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'}
                          </span>
                        </div>
                        
                        <div className="text-xs text-gray-600 space-y-1">
                          <div>
                            <span className="font-medium">–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</span> 
                            <span className={entry.change_amount >= 0 ? 'text-success-600' : 'text-danger-600'}>
                              {getCurrencySymbol(viewingAccountHistory.currency || 'USD')}{entry.old_balance} ‚Üí {getCurrencySymbol(viewingAccountHistory.currency || 'USD')}{entry.new_balance} 
                              ({entry.change_amount >= 0 ? '+' : ''}{getCurrencySymbol(viewingAccountHistory.currency || 'USD')}{entry.change_amount})
                            </span>
                          </div>
                          {entry.changed_by_name && (
                            <div>
                              <span className="font-medium">–í—ã–ø–æ–ª–Ω–∏–ª:</span> {entry.changed_by_name}
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <div className="text-xs text-gray-500 text-right">
                        {new Date(entry.created_at).toLocaleString('ru-RU')}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            <div className="flex justify-end pt-4">
              <button
                onClick={() => setShowAccountHistoryModal(false)}
                className="btn-info"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
            </div>
          </div>
        )}
      </Modal>
    </>
  )
}
