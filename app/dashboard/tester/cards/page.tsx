'use client'

import { useState, useEffect } from 'react'
import { useToast } from '@/components/ui/Toast'
import DataTable, { Column, ActionButton } from '@/components/ui/DataTable'
import KPICard from '@/components/ui/KPICard'
import StatusBadge from '@/components/ui/StatusBadge'
import Modal from '@/components/ui/Modal'
import { 
  CreditCardIcon,
  ComputerDesktopIcon,
  CheckCircleIcon,
  XCircleIcon,
  UserIcon,
  EyeIcon
} from '@heroicons/react/24/outline'

interface Card {
  id: string
  card_number_mask: string
  card_bin: string
  card_type: string
  status: string
  daily_limit: number
  exp_month: number
  exp_year: number
  cvv?: string
  full_card_number?: string
  account_balance: number
  account_currency: string
  assigned_to: string | null
  assigned_casino_id: string | null
  deposit_amount?: number
  created_at: string
  casino_assignments?: {
    assignment_id: string
    casino_id: string
    casino_name: string
    casino_company?: string
    casino_currency?: string
    assignment_type: string
    status: string
    deposit_amount?: number
    has_deposit: boolean
  }[]
  bank_account?: {
    id: string
    holder_name: string
    currency: string
    bank?: {
      name: string
      country?: string
    }
  }
  casino?: {
    id: string
    name: string
    company?: string
    currency?: string
  }
}

interface Casino {
  id: string
  name: string
  status: string
  allowed_bins: string[]
  company?: string
  currency?: string
}

interface CardStats {
  totalCards: number
  availableCards: number
  inWorkCards: number
  completedCards: number
}

export default function TesterCardsPage() {
  const { addToast } = useToast()
  const [cards, setCards] = useState<Card[]>([])
  const [casinos, setCasinos] = useState<Casino[]>([])
  const [stats, setStats] = useState<CardStats>({
    totalCards: 0,
    availableCards: 0,
    inWorkCards: 0,
    completedCards: 0
  })
  const [loading, setLoading] = useState(true)
  const [showDetailsModal, setShowDetailsModal] = useState(false)
  const [selectedCard, setSelectedCard] = useState<Card | null>(null)
  const [selectedCards, setSelectedCards] = useState<Set<string>>(new Set())
  const [allCasinos, setAllCasinos] = useState<Casino[]>([])
  const [selectedCasinoFilter, setSelectedCasinoFilter] = useState('')
  const [casinoSearchTerm, setCasinoSearchTerm] = useState('')
  const [assigning, setAssigning] = useState(false)
  const [activeTab, setActiveTab] = useState<'free' | 'assigned'>('free')
  const [expandedAssignments, setExpandedAssignments] = useState<Set<string>>(new Set())

  useEffect(() => {
    loadCards()
    loadCasinos()
    loadAllCasinos()
  }, [])

  async function loadAllCasinos() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞–∑–∏–Ω–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—ã–±–æ—Ä–∞
      const response = await fetch('/api/casinos')
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∑–∏–Ω–æ')
      }

      const { casinos: casinosData } = await response.json()
      setAllCasinos(casinosData || [])

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞–∑–∏–Ω–æ:', error)
    }
  }

  async function loadCards() {
    try {
      const response = await fetch('/api/cards')
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç')
      }

      const { cards: cardsData } = await response.json()
      
      console.log('üÉè –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫–∞—Ä—Ç—ã:', {
        totalCards: cardsData?.length || 0,
        firstCard: cardsData?.[0] ? {
          id: cardsData[0].id,
          mask: cardsData[0].card_number_mask,
          status: cardsData[0].status,
          bankAccount: cardsData[0].bank_account
        } : null
      })
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
      const cardsWithCasinos = await Promise.all(
        cardsData.map(async (card: Card) => {
          if (card.assigned_casino_id) {
            try {
              const casinoResponse = await fetch(`/api/casinos/${card.assigned_casino_id}`)
              if (casinoResponse.ok) {
                const { casino } = await casinoResponse.json()
                return { ...card, casino: casino }
              }
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∑–∏–Ω–æ –¥–ª—è –∫–∞—Ä—Ç—ã:', error)
            }
          }
          return card
        })
      )
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ
      setCards(cardsWithCasinos || [])

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', error)
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç',
        description: error.message
      })
    } finally {
      setLoading(false)
    }
  }

  async function loadCasinos() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–∞–∑–∏–Ω–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è Junior
      const response = await fetch('/api/casinos?status=approved')
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∑–∏–Ω–æ')
      }

      const { casinos: casinosData } = await response.json()
      setCasinos(casinosData || [])

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∑–∏–Ω–æ:', error)
    }
  }



  function toggleCardSelection(cardId: string) {
    const newSelected = new Set(selectedCards)
    if (newSelected.has(cardId)) {
      newSelected.delete(cardId)
    } else {
      newSelected.add(cardId)
    }
    setSelectedCards(newSelected)
  }

  function selectAllCards() {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–£ –ñ–ï –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ DataTable –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    let availableCards = cards.filter(card => {
      let baseFilter = false
      
      if (activeTab === 'free') {
        // –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã
        baseFilter = card.status === 'active' && !card.assigned_to && !card.assigned_casino_id
      } else {
        // –ú–æ–∏ –∫–∞—Ä—Ç—ã
        baseFilter = (card.casino_assignments && card.casino_assignments.length > 0) || 
                    card.assigned_casino_id !== null
      }
      
      if (!baseFilter) return false
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∫–∞–∑–∏–Ω–æ
      if (selectedCasinoFilter && activeTab === 'free') {
        // –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ –∫–∞–∑–∏–Ω–æ
        const isAlreadyAssigned = card.casino_assignments?.some(a => 
          a.casino_id === selectedCasinoFilter && a.status === 'active'
        ) || card.assigned_casino_id === selectedCasinoFilter
        
        if (isAlreadyAssigned) return false
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º BIN –∫–æ–¥—ã
        const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
        if (selectedCasino?.allowed_bins && selectedCasino.allowed_bins.length > 0) {
          const cardBin = card.card_bin.substring(0, 6)
          return selectedCasino.allowed_bins.includes(cardBin)
        }
      }
      
      return true
    })
    
    const availableCardIds = availableCards.map(card => card.id)
    setSelectedCards(new Set(availableCardIds))
  }

  function clearSelection() {
    setSelectedCards(new Set())
  }

  function toggleAssignmentExpansion(cardId: string) {
    const newExpanded = new Set(expandedAssignments)
    if (newExpanded.has(cardId)) {
      newExpanded.delete(cardId)
    } else {
      newExpanded.add(cardId)
    }
    setExpandedAssignments(newExpanded)
  }

  async function handleMassAssignCards() {
    if (selectedCards.size === 0) {
      addToast({ type: 'error', title: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' })
      return
    }

    if (!selectedCasinoFilter) {
      addToast({ type: 'error', title: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∑–∏–Ω–æ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç' })
      return
    }

    setAssigning(true)

    try {
      const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
      
      // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –†–ê–ë–û–ß–ò–ô –ö–û–î - –º–∞—Å—Å–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ assign-correct
      const response = await fetch('/api/cards/assign-correct', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          card_ids: Array.from(selectedCards),
          casino_id: selectedCasinoFilter
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error)
      }

      addToast({
        type: 'success',
        title: '–ö–∞—Ä—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã',
        description: data.message
      })

      if (data.assigned_count < data.total_requested) {
        addToast({
          type: 'warning',
          title: '–ß–∞—Å—Ç–∏—á–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
          description: `${data.assigned_count} –∏–∑ ${data.total_requested} –∫–∞—Ä—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–æ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)`
        })
      }

      setSelectedCards(new Set())
      await loadCards()

    } catch (error: any) {
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ä—Ç',
        description: error.message
      })
    } finally {
      setAssigning(false)
    }
  }



  async function handleUnassignCard(card: Card) {
    try {
      // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ô –†–ê–ë–û–ß–ò–ô –ö–û–î - –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ unassign-from-casino
      if (card.casino_assignments && card.casino_assignments.length > 0) {
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ—Ç –∫–∞–∂–¥–æ–≥–æ –∫–∞–∑–∏–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
        const promises = card.casino_assignments.map(assignment =>
          fetch('/api/cards/unassign-from-casino', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              card_id: card.id,
              casino_id: assignment.casino_id
            })
          })
        )

        await Promise.all(promises)
        
        addToast({
          type: 'success',
          title: '–ö–∞—Ä—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞',
          description: `–ö–∞—Ä—Ç–∞ ${card.card_number_mask} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞ –æ—Ç ${card.casino_assignments.length} –∫–∞–∑–∏–Ω–æ`
        })
      } else if (card.assigned_casino_id) {
        // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ - —á–µ—Ä–µ–∑ assigned_casino_id
        const response = await fetch('/api/cards/unassign-from-casino', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            card_id: card.id,
            casino_id: card.assigned_casino_id
          })
        })

        const data = await response.json()

        if (!response.ok) {
          throw new Error(data.error)
        }

        addToast({
          type: 'success',
          title: '–ö–∞—Ä—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞',
          description: data.message
        })
      }

      await loadCards()

    } catch (error: any) {
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∫–∞—Ä—Ç—ã',
        description: error.message
      })
    }
  }

  function getCurrencySymbol(currency: string) {
    const symbols = { 'USD': '$', 'EUR': '‚Ç¨', 'GBP': '¬£', 'CAD': 'C$' }
    return symbols[currency as keyof typeof symbols] || currency
  }

  // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
  function calculateStats() {
    if (activeTab === 'assigned') {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è "–ú–æ–∏ –∫–∞—Ä—Ç—ã" - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫—É –∫–∞—Ä—Ç—ã
      const myCards = cards.filter(c => 
        (c.casino_assignments && c.casino_assignments.length > 0) || 
        c.assigned_casino_id !== null
      )
      
      return {
        totalCards: myCards.length,
        availableCards: myCards.filter(c => {
          // –ö–∞—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π (–±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤)
          const hasActiveAssignments = c.casino_assignments?.some(a => !a.has_deposit) || 
                                     (c.assigned_casino_id && !c.deposit_amount)
          return hasActiveAssignments
        }).length,
        inWorkCards: myCards.filter(c => {
          // –ö–∞—Ä—Ç—ã –≤ —Ä–∞–±–æ—Ç–µ (–µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –±–µ–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤)
          return c.casino_assignments?.some(a => !a.has_deposit) || 
                 (c.assigned_casino_id && !c.deposit_amount)
        }).length,
        completedCards: myCards.filter(c => {
          // –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã (–µ—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã)
          return c.casino_assignments?.some(a => a.has_deposit) || 
                 (c.assigned_casino_id && c.deposit_amount)
        }).length
      }
    } else {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è "–°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã"
      let filteredCards = cards

      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∫–∞–∑–∏–Ω–æ, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ BIN –∫–æ–¥–∞–º
      if (selectedCasinoFilter) {
        const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
        if (selectedCasino?.allowed_bins && selectedCasino.allowed_bins.length > 0) {
          filteredCards = cards.filter(card => {
            const cardBin = card.card_bin.substring(0, 6)
            return selectedCasino.allowed_bins.includes(cardBin)
          })
        }
      }

      return {
        totalCards: filteredCards.length,
        availableCards: filteredCards.filter(c => {
          const isAvailable = c.status === 'active' && !c.assigned_to && !c.assigned_casino_id
          
          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ –∫–∞–∑–∏–Ω–æ, –∏—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ –∫–∞–∑–∏–Ω–æ
          if (selectedCasinoFilter && isAvailable) {
            const isAlreadyAssigned = c.casino_assignments?.some(a => 
              a.casino_id === selectedCasinoFilter && a.status === 'active'
            ) || c.assigned_casino_id === selectedCasinoFilter
            
            return !isAlreadyAssigned
          }
          
          return isAvailable
        }).length,
        inWorkCards: filteredCards.filter(c => c.assigned_casino_id && !c.deposit_amount).length,
        completedCards: filteredCards.filter(c => c.assigned_casino_id && c.deposit_amount).length
      }
    }
  }

  const dynamicStats = calculateStats()

  const columns: Column<Card>[] = [
    {
      key: 'select',
      label: '–í—ã–±—Ä–∞—Ç—å',
      align: 'center',
      render: (card) => (
        <input
          type="checkbox"
          checked={selectedCards.has(card.id)}
          onChange={() => toggleCardSelection(card.id)}
          disabled={card.status !== 'active' || !!card.assigned_to || !!card.assigned_casino_id}
          className="rounded"
        />
      )
    },
    {
      key: 'card_number_mask',
      label: '–ö–∞—Ä—Ç–∞',
      sortable: true,
      filterable: true,
      render: (card) => {
        const cardBin = card.card_bin.substring(0, 6)
        const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
        const binMatches = selectedCasino?.allowed_bins?.includes(cardBin)
        
        return (
          <div>
            <div className="font-mono font-medium text-gray-900">{card.card_number_mask}</div>
            <div className="text-sm text-gray-500">
              BIN: <span className={binMatches && selectedCasinoFilter ? 'text-success-600 font-medium' : ''}>{cardBin}</span>
              {binMatches && selectedCasinoFilter && <span className="text-success-600 ml-1">‚úÖ</span>}
              {selectedCasinoFilter && !binMatches && selectedCasino?.allowed_bins && selectedCasino.allowed_bins.length > 0 && <span className="text-danger-600 ml-1">‚ùå</span>}
              <span className="ml-2">‚Ä¢ {card.card_type === 'pink' ? 'üå∏ Pink' : '‚ö´ Grey'}</span>
            </div>
          </div>
        )
      }
    },
    {
      key: 'bank_account',
      label: '–ë–∞–Ω–∫',
      render: (card) => (
        <div>
          <div className="font-medium text-gray-900">
            {card.bank_account?.bank?.name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}
            {card.bank_account?.bank?.country && (
              <span className="text-xs text-gray-500 ml-2">({card.bank_account.bank.country})</span>
            )}
          </div>
          <div className="text-sm text-gray-500">{card.bank_account?.holder_name || '–ó–∞–≥—Ä—É–∑–∫–∞...'}</div>
        </div>
      )
    },
    {
      key: 'account_balance',
      label: '–ë–∞–ª–∞–Ω—Å',
      align: 'right',
      sortable: true,
      render: (card) => (
        <div className="text-right">
          <div className={`font-medium ${(card.account_balance || 0) >= 10 ? 'text-success-600' : 'text-danger-600'}`}>
            {getCurrencySymbol(card.account_currency)}{(card.account_balance || 0).toFixed(2)}
          </div>
        </div>
      )
    },
    {
      key: 'status',
      label: '–°—Ç–∞—Ç—É—Å',
      align: 'center',
      sortable: true,
      render: (card) => <StatusBadge status={card.status} size="sm" />
    },
    {
      key: 'casino',
      label: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
      render: (card) => {
        const isExpanded = expandedAssignments.has(card.id)
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        if (card.casino_assignments && card.casino_assignments.length > 0) {
          return (
            <div>
              <button
                onClick={() => toggleAssignmentExpansion(card.id)}
                className="text-left w-full"
              >
                <div className="font-medium text-primary-600">
                  {card.casino_assignments.length === 1 
                    ? card.casino_assignments[0].casino_name
                    : `${card.casino_assignments.length} –∫–∞–∑–∏–Ω–æ`
                  }
                  <span className="ml-2 text-xs">
                    {isExpanded ? '‚ñº' : '‚ñ∂'}
                  </span>
                </div>
                <div className="text-xs text-gray-500">
                  üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ ‚Ä¢ {card.casino_assignments.filter(a => a.has_deposit).length > 0 ? 'üí∞ –ï—Å—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã' : '‚è≥ –í —Ä–∞–±–æ—Ç–µ'}
                </div>
              </button>
              
              {isExpanded && (
                <div className="mt-2 space-y-2 border-t border-gray-100 pt-2">
                  {card.casino_assignments.map((assignment, index) => (
                    <div key={assignment.assignment_id} className="bg-gray-50 rounded p-2">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="font-medium text-gray-900 text-sm">{assignment.casino_name}</div>
                          <div className="text-xs text-gray-500">
                            {assignment.casino_company && `${assignment.casino_company} ‚Ä¢ `}
                            –ù–∞–∑–Ω–∞—á–µ–Ω–∞: {new Date().toLocaleDateString('ru-RU')}
                          </div>
                          <div className="text-xs">
                            {assignment.has_deposit ? (
                              <span className="text-red-600">üí∞ –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–∞ (${assignment.deposit_amount})</span>
                            ) : (
                              <span className="text-green-600">‚è≥ –í —Ä–∞–±–æ—Ç–µ</span>
                            )}
                          </div>
                        </div>
                        {!assignment.has_deposit && (
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              // –û—Ç–∑—ã–≤–∞–µ–º –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ
                              fetch('/api/cards/unassign-from-casino', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({
                                  card_id: card.id,
                                  casino_id: assignment.casino_id
                                })
                              }).then(() => {
                                addToast({
                                  type: 'success',
                                  title: '–û—Ç–æ–∑–≤–∞–Ω–æ',
                                  description: `–ö–∞—Ä—Ç–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞ —Å ${assignment.casino_name}`
                                })
                                loadCards()
                              })
                            }}
                            className="text-xs text-red-600 hover:text-red-800 px-2 py-1 border border-red-200 rounded"
                            title="–û—Ç–æ–∑–≤–∞—Ç—å —Å —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ"
                          >
                            üóëÔ∏è –û—Ç–æ–∑–≤–∞—Ç—å
                          </button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )
        }
        
        // –°—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (card.casino) {
          return (
            <div>
              <div className="font-medium text-primary-600">{card.casino.name}</div>
              <div className="text-xs text-gray-500">üéØ –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –º–Ω–µ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)</div>
            </div>
          )
        }
        
        if (card.assigned_to) {
          return (
            <div>
              <div className="text-sm text-gray-600">–ù–∞–∑–Ω–∞—á–µ–Ω–∞ Junior</div>
              <div className="text-xs text-gray-500">–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞</div>
            </div>
          )
        }
        
        return (
          <span className="text-sm text-success-600 font-medium">üÜì –°–≤–æ–±–æ–¥–Ω–∞</span>
        )
      }
    },
    {
      key: 'exp_year',
      label: '–ò—Å—Ç–µ–∫–∞–µ—Ç',
      align: 'center',
      render: (card) => (
        <span className="text-sm text-gray-600">
          {card.exp_month.toString().padStart(2, '0')}/{card.exp_year}
        </span>
      )
    }
  ]

  // –£–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è - —Ç–µ–ø–µ—Ä—å –æ—Ç–∑—ã–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è —Å–ø–∏—Å–∫–µ
  const actions: ActionButton<Card>[] = []

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">–ö–∞—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h1>
        <p className="text-gray-600">–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∑–∏–Ω–æ</p>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div className="border-b border-gray-200">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => {
              setActiveTab('free')
              setSelectedCards(new Set())
            }}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'free'
                ? 'border-primary-500 text-primary-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            üÜì –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã
          </button>
          <button
            onClick={() => {
              setActiveTab('assigned')
              setSelectedCards(new Set())
            }}
            className={`py-2 px-1 border-b-2 font-medium text-sm ${
              activeTab === 'assigned'
                ? 'border-primary-500 text-primary-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            }`}
          >
            üéØ –ú–æ–∏ –∫–∞—Ä—Ç—ã
          </button>
        </nav>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <KPICard
          title={activeTab === 'assigned' ? "–ú–æ–∏—Ö –∫–∞—Ä—Ç" : (selectedCasinoFilter ? "–ö–∞—Ä—Ç —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º BIN" : "–í—Å–µ–≥–æ –∫–∞—Ä—Ç")}
          value={dynamicStats.totalCards}
          icon={<CreditCardIcon className="h-6 w-6" />}
          color="primary"
        />
        <KPICard
          title={activeTab === 'assigned' ? "–î–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã" : (selectedCasinoFilter ? "–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∫–∞–∑–∏–Ω–æ" : "–î–æ—Å—Ç—É–ø–Ω—ã–µ")}
          value={dynamicStats.availableCards}
          icon={<CheckCircleIcon className="h-6 w-6" />}
          color="success"
        />
        <KPICard
          title="–í —Ä–∞–±–æ—Ç–µ"
          value={dynamicStats.inWorkCards}
          icon={<UserIcon className="h-6 w-6" />}
          color="warning"
        />
        <KPICard
          title="–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"
          value={dynamicStats.completedCards}
          icon={<XCircleIcon className="h-6 w-6" />}
          color="danger"
        />
      </div>

      {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞–∑–∏–Ω–æ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç */}
      {activeTab === 'free' && (
        <div className="card">
        <div className="card-header">
          <h3 className="text-lg font-semibold text-gray-900">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∑–∏–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç</h3>
        </div>
        <div className="p-4">
          <div className="relative">
            <input
              type="text"
              placeholder={selectedCasinoFilter ? 
                allCasinos.find(c => c.id === selectedCasinoFilter)?.name || "–ù–∞–π—Ç–∏ –∫–∞–∑–∏–Ω–æ..." :
                "–ù–∞–π—Ç–∏ –∫–∞–∑–∏–Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏..."
              }
              value={casinoSearchTerm}
              onChange={(e) => setCasinoSearchTerm(e.target.value)}
              className="form-input pr-10"
            />
            {casinoSearchTerm && (
              <div className="absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-md mt-1 max-h-48 overflow-y-auto z-10 shadow-lg">
                {allCasinos
                  .filter(casino => 
                    casino.name.toLowerCase().includes(casinoSearchTerm.toLowerCase()) ||
                    (casino.company && casino.company.toLowerCase().includes(casinoSearchTerm.toLowerCase()))
                  )
                  .map(casino => (
                    <button
                      key={casino.id}
                      onClick={() => {
                        setSelectedCasinoFilter(casino.id)
                        setCasinoSearchTerm('')
                      }}
                      className="w-full text-left px-4 py-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0"
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="font-medium text-gray-900">
                            {casino.status === 'approved' ? '‚úÖ' : casino.status === 'testing' ? 'üß™' : casino.status === 'new' ? 'üÜï' : 'üö´'} {casino.name}
                          </div>
                          {casino.company && (
                            <div className="text-sm text-gray-500">üè¢ {casino.company}</div>
                          )}
                        </div>
                        <div className="text-xs text-gray-500">
                          {casino.currency || 'USD'}
                        </div>
                      </div>
                    </button>
                  ))}
                {allCasinos.filter(casino => 
                  casino.name.toLowerCase().includes(casinoSearchTerm.toLowerCase()) ||
                  (casino.company && casino.company.toLowerCase().includes(casinoSearchTerm.toLowerCase()))
                ).length === 0 && (
                  <div className="px-4 py-2 text-gray-500 text-sm">–ö–∞–∑–∏–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
                )}
              </div>
            )}
            <button
              onClick={() => {
                setSelectedCasinoFilter('')
                setCasinoSearchTerm('')
              }}
              className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
            >
              ‚úï
            </button>
          </div>
          {selectedCasinoFilter && (
            <div className="mt-3 p-3 bg-primary-50 rounded-lg">
              <div className="flex justify-between items-center">
                <div className="text-sm text-primary-800">
                  üìä –í—ã–±—Ä–∞–Ω–æ –∫–∞–∑–∏–Ω–æ: <strong>{allCasinos.find(c => c.id === selectedCasinoFilter)?.name}</strong>
                  {(() => {
                    const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
                    if (selectedCasino?.allowed_bins && selectedCasino.allowed_bins.length > 0) {
                      return (
                        <div className="text-xs text-primary-600 mt-1">
                          üéØ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ BIN: {selectedCasino.allowed_bins.slice(0, 3).join(', ')}
                          {selectedCasino.allowed_bins.length > 3 && ` +${selectedCasino.allowed_bins.length - 3} –µ—â–µ`}
                        </div>
                      )
                    }
                    return (
                      <div className="text-xs text-warning-600 mt-1">
                        ‚ö†Ô∏è BIN –∫–æ–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∫–∞—Ä—Ç—ã
                      </div>
                    )
                  })()}
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={selectAllCards}
                    className="btn-info text-xs"
                  >
                    ‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ
                  </button>
                  <button
                    onClick={clearSelection}
                    className="btn-secondary text-xs"
                    disabled={selectedCards.size === 0}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </button>
                  {activeTab === 'free' ? (
                    <button
                      onClick={handleMassAssignCards}
                      className="btn-primary text-xs"
                      disabled={selectedCards.size === 0 || assigning}
                    >
                      {assigning ? '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ...' : `–ù–∞–∑–Ω–∞—á–∏—Ç—å ${selectedCards.size} –∫–∞—Ä—Ç`}
                    </button>
                  ) : (
                    <button
                      onClick={() => {
                        // –ú–∞—Å—Å–æ–≤–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç
                        Array.from(selectedCards).forEach(cardId => {
                          const card = cards.find(c => c.id === cardId)
                          if (card) handleUnassignCard(card)
                        })
                      }}
                      className="btn-danger text-xs"
                      disabled={selectedCards.size === 0}
                    >
                      –û—Å–≤–æ–±–æ–¥–∏—Ç—å ${selectedCards.size} –∫–∞—Ä—Ç
                    </button>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
      )}

      {/* –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä—Ç */}
      <div className="card">
        <div className="card-header">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-gray-900">
              {activeTab === 'free' ? '–°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã' : '–ú–æ–∏ –∫–∞—Ä—Ç—ã'} 
              ({cards.filter(card => {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ DataTable
                let baseFilter = false
                
                if (activeTab === 'free') {
                  // –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã
                  baseFilter = card.status === 'active' && !card.assigned_to && !card.assigned_casino_id
                } else {
                  // –ú–æ–∏ –∫–∞—Ä—Ç—ã - –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∏–ª–∏ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                  baseFilter = (card.casino_assignments && card.casino_assignments.length > 0) || 
                              card.assigned_casino_id !== null
                }
                
                if (!baseFilter) return false
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç
                if (selectedCasinoFilter && activeTab === 'free') {
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É–∂–µ –Ω–∞ —ç—Ç–æ –∫–∞–∑–∏–Ω–æ
                  const isAlreadyAssigned = card.casino_assignments?.some(a => 
                    a.casino_id === selectedCasinoFilter && a.status === 'active'
                  ) || card.assigned_casino_id === selectedCasinoFilter
                  
                  if (isAlreadyAssigned) {
                    return false // –°–∫—Ä—ã–≤–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ
                  }
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º BIN –∫–æ–¥—ã
                  const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
                  if (selectedCasino?.allowed_bins && selectedCasino.allowed_bins.length > 0) {
                    const cardBin = card.card_bin.substring(0, 6)
                    return selectedCasino.allowed_bins.includes(cardBin)
                  }
                }
                
                return true
              }).length}) 
              {selectedCards.size > 0 && `‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: ${selectedCards.size}`}
            </h3>
            <div className="flex items-center space-x-2">
              {selectedCards.size > 0 && (
                <button
                  onClick={clearSelection}
                  className="btn-secondary text-xs"
                >
                  ‚ùå –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä ({selectedCards.size})
                </button>
              )}
            </div>
          </div>
        </div>
        
        <DataTable
          data={cards.filter(card => {
            // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
            let baseFilter = false
            
            if (activeTab === 'free') {
              // –°–≤–æ–±–æ–¥–Ω—ã–µ –∫–∞—Ä—Ç—ã
              baseFilter = card.status === 'active' && !card.assigned_to && !card.assigned_casino_id
            } else {
              // –ú–æ–∏ –∫–∞—Ä—Ç—ã - –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∏–ª–∏ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
              baseFilter = (card.casino_assignments && card.casino_assignments.length > 0) || 
                          card.assigned_casino_id !== null
            }
            
            if (!baseFilter) return false
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–∞—Ä—Ç
            if (selectedCasinoFilter && activeTab === 'free') {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É–∂–µ –Ω–∞ —ç—Ç–æ –∫–∞–∑–∏–Ω–æ
              const isAlreadyAssigned = card.casino_assignments?.some(a => 
                a.casino_id === selectedCasinoFilter && a.status === 'active'
              ) || card.assigned_casino_id === selectedCasinoFilter
              
              if (isAlreadyAssigned) {
                return false // –°–∫—Ä—ã–≤–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º BIN –∫–æ–¥—ã
              const selectedCasino = allCasinos.find(c => c.id === selectedCasinoFilter)
              if (selectedCasino?.allowed_bins && selectedCasino.allowed_bins.length > 0) {
                const cardBin = card.card_bin.substring(0, 6)
                return selectedCasino.allowed_bins.includes(cardBin)
              }
            }
            
            return true
          })}
          columns={columns}
          actions={actions}
          loading={loading}
          pagination={{ pageSize: 20 }}
          filtering={true}
          exportable={true}
          emptyMessage={activeTab === 'free' ? "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ" : "–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"}
        />
      </div>



      {/* Modal –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ä—Ç—ã */}
      <Modal
        isOpen={showDetailsModal}
        onClose={() => {
          setShowDetailsModal(false)
          setSelectedCard(null)
        }}
        title="–î–µ—Ç–∞–ª–∏ –∫–∞—Ä—Ç—ã"
        size="lg"
      >
        {selectedCard && (
          <div className="space-y-6">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-gray-50 rounded-lg p-4">
              <h4 className="font-medium text-gray-900 mb-3">üÉè –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium text-gray-700">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</span>
                  <div className="font-mono text-lg text-gray-900">{selectedCard.full_card_number || selectedCard.card_number_mask}</div>
                </div>
                <div>
                  <span className="font-medium text-gray-700">BIN –∫–æ–¥:</span>
                  <div className="font-mono text-gray-900">{selectedCard.card_bin}</div>
                </div>
                <div>
                  <span className="font-medium text-gray-700">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</span>
                  <div className="font-mono text-gray-900">
                    {selectedCard.exp_month.toString().padStart(2, '0')}/{selectedCard.exp_year}
                  </div>
                </div>
                <div>
                  <span className="font-medium text-gray-700">CVV:</span>
                  <div className="font-mono text-gray-900">{selectedCard.cvv || '***'}</div>
                </div>
                <div>
                  <span className="font-medium text-gray-700">–¢–∏–ø –∫–∞—Ä—Ç—ã:</span>
                  <div className="text-gray-900">
                    {selectedCard.card_type === 'pink' ? 'üå∏ Pink' : '‚ö´ Grey'}
                  </div>
                </div>
                <div>
                  <span className="font-medium text-gray-700">–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:</span>
                  <div className="text-gray-900">${selectedCard.daily_limit}</div>
                </div>
              </div>
            </div>

            {/* –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-blue-50 rounded-lg p-4">
              <h4 className="font-medium text-blue-900 mb-3">üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç</h4>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="font-medium text-blue-700">–ë–∞–Ω–∫:</span>
                  <div className="text-blue-900">{selectedCard.bank_account?.bank?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                </div>
                <div>
                  <span className="font-medium text-blue-700">–í–ª–∞–¥–µ–ª–µ—Ü:</span>
                  <div className="text-blue-900">{selectedCard.bank_account?.holder_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                </div>
                <div>
                  <span className="font-medium text-blue-700">–ë–∞–ª–∞–Ω—Å:</span>
                  <div className={`font-semibold ${(selectedCard.account_balance || 0) >= 10 ? 'text-green-600' : 'text-red-600'}`}>
                    {getCurrencySymbol(selectedCard.account_currency)}{(selectedCard.account_balance || 0).toFixed(2)}
                  </div>
                </div>
                <div>
                  <span className="font-medium text-blue-700">–°—Ç–∞—Ç—É—Å:</span>
                  <div><StatusBadge status={selectedCard.status} size="sm" /></div>
                </div>
              </div>
            </div>

            {/* –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è */}
            {selectedCard.casino_assignments && selectedCard.casino_assignments.length > 0 && (
              <div className="bg-green-50 rounded-lg p-4">
                <h4 className="font-medium text-green-900 mb-3">üé∞ –ù–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞–∑–∏–Ω–æ</h4>
                <div className="space-y-2">
                  {selectedCard.casino_assignments.map((assignment: any, index: number) => (
                    <div key={index} className="flex justify-between items-center p-2 bg-white rounded border">
                      <div>
                        <div className="font-medium text-gray-900">{assignment.casino_name}</div>
                        <div className="text-xs text-gray-500">
                          {assignment.assignment_type === 'testing' ? 'üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' : 'üíº –†–∞–±–æ—Ç–∞'} ‚Ä¢ {assignment.status}
                        </div>
                      </div>
                      <div className="text-right text-xs text-gray-500">
                        {assignment.has_deposit ? 'üí∞ –î–µ–ø–æ–∑–∏—Ç —Å–¥–µ–ª–∞–Ω' : '‚è≥ –û–∂–∏–¥–∞–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞'}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex justify-end space-x-3">
              <button
                onClick={() => {
                  setShowDetailsModal(false)
                  setSelectedCard(null)
                }}
                className="btn-secondary"
              >
                –ó–∞–∫—Ä—ã—Ç—å
              </button>
              {selectedCard.status === 'active' && !selectedCard.assigned_to && (
                <button
                  onClick={() => {
                    setShowDetailsModal(false)
                    setSelectedCards(new Set([selectedCard.id]))
                  }}
                  className="btn-primary"
                  disabled={!selectedCasinoFilter}
                >
                  {selectedCasinoFilter ? '–í—ã–±—Ä–∞—Ç—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' : '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∑–∏–Ω–æ'}
                </button>
              )}
            </div>
          </div>
        )}
      </Modal>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-primary-50 border border-primary-200 rounded-lg p-6">
        <h3 className="font-medium text-primary-900 mb-3">üÉè –†–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h3>
        <div className="text-sm text-primary-800 space-y-2">
          <div>‚Ä¢ <strong>–ù–∞–∑–Ω–∞—á–∞–π—Ç–µ –∫–∞—Ä—Ç—ã</strong> –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞–∑–∏–Ω–æ</div>
          <div>‚Ä¢ <strong>–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ BIN –∫–æ–¥—ã</strong> - –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ</div>
          <div>‚Ä¢ <strong>–°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–∞–º–∏</strong> - –∫–∞—Ä—Ç—ã —Å –Ω–∏–∑–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–æ–π—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤</div>
          <div>‚Ä¢ <strong>–û—Å–≤–æ–±–æ–∂–¥–∞–π—Ç–µ –∫–∞—Ä—Ç—ã</strong> –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</div>
        </div>
      </div>
    </div>
  )
}
