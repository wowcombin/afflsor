'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import {
  CommandLineIcon,
  ClipboardDocumentListIcon,
  WrenchScrewdriverIcon,
  BuildingLibraryIcon,
  CreditCardIcon
} from '@heroicons/react/24/outline'

interface ToolSection {
  title: string
  description: string
  icon: React.ComponentType<{ className?: string }>
  href?: string
  action?: () => void
  color: string
}

export default function TeamLeadToolsPage() {
  const router = useRouter()
  const [generatedData, setGeneratedData] = useState('')
  const [generationType, setGenerationType] = useState<'username' | 'password' | 'email' | 'phone'>('username')
  const [count, setCount] = useState(5)
  const [textToFormat, setTextToFormat] = useState('')
  const [formattedText, setFormattedText] = useState('')

  // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ —É Junior)
  const generateRandomData = () => {
    const results: string[] = []
    
    for (let i = 0; i < count; i++) {
      switch (generationType) {
        case 'username':
          const adjectives = ['Cool', 'Fast', 'Smart', 'Lucky', 'Brave', 'Quick', 'Strong', 'Wise']
          const nouns = ['Tiger', 'Eagle', 'Wolf', 'Lion', 'Bear', 'Fox', 'Hawk', 'Shark']
          const randomNum = Math.floor(Math.random() * 1000)
          results.push(`${adjectives[Math.floor(Math.random() * adjectives.length)]}${nouns[Math.floor(Math.random() * nouns.length)]}${randomNum}`)
          break
        case 'password':
          const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*'
          let password = ''
          for (let j = 0; j < 12; j++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length))
          }
          results.push(password)
          break
        case 'email':
          const domains = ['gmail.com', 'yahoo.com', 'outlook.com', 'hotmail.com']
          const names = ['john', 'jane', 'mike', 'sarah', 'alex', 'emma', 'david', 'lisa']
          const randomName = names[Math.floor(Math.random() * names.length)]
          const randomDomain = domains[Math.floor(Math.random() * domains.length)]
          const randomNum2 = Math.floor(Math.random() * 1000)
          results.push(`${randomName}${randomNum2}@${randomDomain}`)
          break
        case 'phone':
          const countryCode = '+1'
          const areaCode = Math.floor(Math.random() * 900) + 100
          const firstPart = Math.floor(Math.random() * 900) + 100
          const secondPart = Math.floor(Math.random() * 9000) + 1000
          results.push(`${countryCode}${areaCode}${firstPart}${secondPart}`)
          break
      }
    }
    
    setGeneratedData(results.join('\n'))
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
  const formatToLowercase = () => {
    setFormattedText(textToFormat.toLowerCase())
  }

  const toolSections: ToolSection[] = [
    {
      title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á Junior\'–∞–º',
      icon: ClipboardDocumentListIcon,
      href: '/dashboard/teamlead/tasks',
      color: 'bg-blue-50 border-blue-200 text-blue-700'
    },
    {
      title: 'Kanban –¥–æ—Å–∫–∞',
      description: '–í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã',
      icon: ClipboardDocumentListIcon,
      href: '/dashboard/teamlead/kanban',
      color: 'bg-green-50 border-green-200 text-green-700'
    },
    {
      title: 'PayPal –∫–æ–º–∞–Ω–¥—ã',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PayPal –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Junior\'–æ–≤',
      icon: CreditCardIcon,
      href: '/dashboard/teamlead/paypal',
      color: 'bg-purple-50 border-purple-200 text-purple-700'
    },
    {
      title: '–ú–æ–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
      description: '–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –∫–∞–∑–∏–Ω–æ',
      icon: BuildingLibraryIcon,
      href: '/dashboard/teamlead/assignments',
      color: 'bg-orange-50 border-orange-200 text-orange-700'
    }
  ]

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-3">
        <WrenchScrewdriverIcon className="h-8 w-8 text-gray-700" />
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã TeamLead</h1>
          <p className="text-gray-600">–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ –∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏</p>
        </div>
      </div>

      {/* –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö */}
      <div className="card">
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
          <CommandLineIcon className="h-5 w-5" />
          –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö
                </label>
                <select
                  value={generationType}
                  onChange={(e) => setGenerationType(e.target.value as any)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="username">–ò–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</option>
                  <option value="password">–ü–∞—Ä–æ–ª–∏</option>
                  <option value="email">Email –∞–¥—Ä–µ—Å–∞</option>
                  <option value="phone">–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</option>
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                </label>
                <input
                  type="number"
                  min="1"
                  max="50"
                  value={count}
                  onChange={(e) => setCount(parseInt(e.target.value) || 1)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <button
                onClick={generateRandomData}
                className="btn-primary w-full"
              >
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –†–µ–∑—É–ª—å—Ç–∞—Ç
            </label>
            <textarea
              value={generatedData}
              readOnly
              rows={8}
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 font-mono text-sm"
              placeholder="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å..."
            />
          </div>
        </div>
      </div>

      {/* –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ */}
      <div className="card">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        </h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            </label>
            <textarea
              value={textToFormat}
              onChange={(e) => setTextToFormat(e.target.value)}
              rows={6}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
            />
            <button
              onClick={formatToLowercase}
              className="btn-secondary mt-2"
            >
              –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            </button>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            </label>
            <textarea
              value={formattedText}
              readOnly
              rows={6}
              className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50"
              placeholder="–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
            />
          </div>
        </div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {toolSections.map((section) => (
          <div
            key={section.href || section.title}
            onClick={() => section.href && router.push(section.href)}
            className={`${section.color} border rounded-lg p-6 cursor-pointer hover:shadow-lg transition-all duration-200 hover:scale-105`}
          >
            <div className="flex items-start gap-4">
              <section.icon className="h-8 w-8 flex-shrink-0" />
              <div>
                <h3 className="text-lg font-semibold mb-2">{section.title}</h3>
                <p className="text-sm opacity-80">{section.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">üõ†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ TeamLead</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-700">
          <div>
            <h4 className="font-medium mb-2">‚ö° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö:</h4>
            <ul className="space-y-1 text-xs">
              <li>‚Ä¢ –°–ª—É—á–∞–π–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
              <li>‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏</li>
              <li>‚Ä¢ Email –∞–¥—Ä–µ—Å–∞</li>
              <li>‚Ä¢ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤</li>
            </ul>
          </div>
          <div>
            <h4 className="font-medium mb-2">üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π:</h4>
            <ul className="space-y-1 text-xs">
              <li>‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á</li>
              <li>‚Ä¢ Kanban –¥–æ—Å–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏</li>
              <li>‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ PayPal –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏</li>
              <li>‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}
