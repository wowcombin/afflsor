'use client'

import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'
import KPICard from '@/components/ui/KPICard'
import { 
  BanknotesIcon,
  CheckCircleIcon,
  TrophyIcon,
  CalendarDaysIcon,
  CreditCardIcon,
  ClockIcon,
  ChartBarIcon
} from '@heroicons/react/24/outline'

interface DashboardStats {
  monthlyProfit: number
  expectedProfit: number
  successRate: number
  teamRanking: number
  totalTeamMembers: number
  daysUntilPayment: number
  totalWorks: number
  activeWorks: number
  completedWorks: number
  totalWithdrawals: number
  receivedWithdrawals: number
}

export default function JuniorDashboard() {
  const router = useRouter()
  const [stats, setStats] = useState<DashboardStats>({
    monthlyProfit: 0,
    expectedProfit: 0,
    successRate: 0,
    teamRanking: 0,
    totalTeamMembers: 0,
    daysUntilPayment: 0,
    totalWorks: 0,
    activeWorks: 0,
    completedWorks: 0,
    totalWithdrawals: 0,
    receivedWithdrawals: 0
  })
  const [loading, setLoading] = useState(true)
  const [exchangeRates, setExchangeRates] = useState<any>(null)

  useEffect(() => {
    loadDashboardData()
  }, [])

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
  async function loadExchangeRates() {
    try {
      const response = await fetch('/api/currency-rates')
      if (response.ok) {
        const data = await response.json()
        setExchangeRates(data.rates)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error)
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å—ã
      setExchangeRates({
        'USD': 1.0,
        'EUR': 1.11,
        'GBP': 1.31,
        'CAD': 0.71
      })
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ USD
  function convertToUSD(amount: number, currency: string): number {
    if (!exchangeRates || currency === 'USD') return amount
    const rate = exchangeRates[currency] || 1
    return amount * rate
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
  async function loadDashboardData() {
    try {
      setLoading(true)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ —Ä–∞–±–æ—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [ratesResponse, worksResponse] = await Promise.all([
        fetch('/api/currency-rates'),
        fetch('/api/works')
      ])
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
      let rates: any = null
      if (ratesResponse.ok) {
        const ratesData = await ratesResponse.json()
        rates = ratesData.rates
        setExchangeRates(rates)
      } else {
        // Fallback –∫—É—Ä—Å—ã
        rates = {
          'USD': 1.0,
          'EUR': 1.11,
          'GBP': 1.31,
          'CAD': 0.71
        }
        setExchangeRates(rates)
      }
      
      if (!worksResponse.ok) throw new Error('Failed to fetch works')
      const { works } = await worksResponse.json()
      
      // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞–º–∏
      const localConvertToUSD = (amount: number, currency: string): number => {
        if (!rates || currency === 'USD') return amount
        const rate = rates[currency] || 1
        console.log(`Converting ${amount} ${currency} to USD: rate=${rate}, result=${amount * rate}`)
        return amount * rate
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const currentMonth = new Date().getMonth()
      const currentYear = new Date().getFullYear()
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
      const monthlyWorks = works.filter((work: any) => {
        const workDate = new Date(work.created_at)
        return workDate.getMonth() === currentMonth && workDate.getFullYear() === currentYear
      })
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏—Ç –∑–∞ –º–µ—Å—è—Ü (–≤—ã–≤–æ–¥—ã - –¥–µ–ø–æ–∑–∏—Ç—ã –≤ USD)
      let monthlyProfit = 0
      let expectedProfit = 0 // –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç (–≤–∫–ª—é—á–∞—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–±–æ—Ç—ã)
      
      monthlyWorks.forEach((work: any) => {
        const depositUSD = localConvertToUSD(work.deposit_amount, work.casinos?.currency || 'USD')
        const receivedWithdrawals = work.work_withdrawals?.filter((w: any) => w.status === 'received') || []
        const allWithdrawals = work.work_withdrawals || []
        
        // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏—Ç (—Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã)
        const withdrawalsUSD = receivedWithdrawals.reduce((sum: number, w: any) => {
          return sum + localConvertToUSD(w.withdrawal_amount, work.casinos?.currency || 'USD')
        }, 0)
        monthlyProfit += (withdrawalsUSD - depositUSD)
        
        // –û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç (–≤—Å–µ –≤—ã–≤–æ–¥—ã, –≤–∫–ª—é—á–∞—è –æ–∂–∏–¥–∞—é—â–∏–µ)
        const expectedWithdrawalsUSD = allWithdrawals.reduce((sum: number, w: any) => {
          return sum + localConvertToUSD(w.withdrawal_amount, work.casinos?.currency || 'USD')
        }, 0)
        expectedProfit += (expectedWithdrawalsUSD - depositUSD)
      })
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å (% –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –≤—ã–≤–æ–¥–æ–≤)
      const allWithdrawals = works.flatMap((work: any) => work.work_withdrawals || [])
      const receivedWithdrawals = allWithdrawals.filter((w: any) => w.status === 'received')
      const successRate = allWithdrawals.length > 0 ? (receivedWithdrawals.length / allWithdrawals.length) * 100 : 0
      
      // –î–Ω–∏ –¥–æ –≤—ã–ø–ª–∞—Ç—ã (–¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞)
      const now = new Date()
      const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0)
      const daysUntilPayment = Math.ceil((lastDayOfMonth.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))
      
      setStats({
        monthlyProfit,
        expectedProfit,
        successRate,
        teamRanking: 1, // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ API –∫–æ–º–∞–Ω–¥—ã
        totalTeamMembers: 5, // TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–∑ API –∫–æ–º–∞–Ω–¥—ã
        daysUntilPayment,
        totalWorks: works.length,
        activeWorks: works.filter((w: any) => w.status === 'active').length,
        completedWorks: works.filter((w: any) => w.status === 'completed').length,
        totalWithdrawals: allWithdrawals.length,
        receivedWithdrawals: receivedWithdrawals.length
      })
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞:', error)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="loading-spinner"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Junior Dashboard</h1>
        <p className="text-gray-600">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∞–º–∏ —Å—Ä–µ–¥—Å—Ç–≤</p>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ KPI */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-6">
        <KPICard
          title="–ü—Ä–æ—Ñ–∏—Ç –∑–∞ –º–µ—Å—è—Ü"
          value={`$${stats.monthlyProfit.toFixed(2)}`}
          icon={<BanknotesIcon className="h-6 w-6" />}
          color="success"
        />
        
        <KPICard
          title="–û–∂–∏–¥–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç"
          value={`$${stats.expectedProfit.toFixed(2)}`}
          icon={<ChartBarIcon className="h-6 w-6" />}
          color="primary"
        />
        
        <KPICard
          title="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å"
          value={`${stats.successRate.toFixed(1)}%`}
          icon={<CheckCircleIcon className="h-6 w-6" />}
          color="primary"
        />
        
        <KPICard
          title="–†–µ–π—Ç–∏–Ω–≥"
          value={`${stats.teamRanking}/${stats.totalTeamMembers}`}
          icon={<TrophyIcon className="h-6 w-6" />}
          color="warning"
        />
        
        <KPICard
          title="–î–æ –≤—ã–ø–ª–∞—Ç—ã"
          value={`${stats.daysUntilPayment} –¥–Ω.`}
          icon={<CalendarDaysIcon className="h-6 w-6" />}
          color="gray"
        />
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <KPICard
          title="–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç"
          value={stats.totalWorks}
          icon={<CreditCardIcon className="h-6 w-6" />}
          color="primary"
        />
        
        <KPICard
          title="–ê–∫—Ç–∏–≤–Ω—ã–µ"
          value={stats.activeWorks}
          icon={<ClockIcon className="h-6 w-6" />}
          color="warning"
        />
        
        <KPICard
          title="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ"
          value={stats.completedWorks}
          icon={<CheckCircleIcon className="h-6 w-6" />}
          color="success"
        />
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="card">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <button 
            onClick={() => router.push('/dashboard/junior/work/new')}
            className="btn-primary"
          >
            –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É
          </button>
          <button 
            onClick={() => router.push('/dashboard/junior/withdrawals')}
            className="btn-secondary"
          >
            –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã–≤–æ–¥—ã
          </button>
          <button 
            onClick={() => router.push('/dashboard/junior/cards')}
            className="btn-secondary"
          >
            –ú–æ–∏ –∫–∞—Ä—Ç—ã
          </button>
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="bg-primary-50 border border-primary-200 rounded-lg p-6">
        <h3 className="font-medium text-primary-900 mb-3">üöÄ –ù–æ–≤–∞—è ERP —Å–∏—Å—Ç–µ–º–∞</h3>
        <div className="text-sm text-primary-800 space-y-2">
          <div>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ —Å –Ω—É–ª—è</div>
          <div>‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</div>
          <div>‚Ä¢ –ù–æ–≤—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å</div>
          <div>‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –ø–æ—ç—Ç–∞–ø–Ω–æ</div>
        </div>
      </div>
    </div>
  )
}
