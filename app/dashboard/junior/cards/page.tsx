'use client'

import { useState, useEffect } from 'react'
import { useToast } from '@/components/ui/Toast'
import DataTable, { Column, ActionButton } from '@/components/ui/DataTable'
import KPICard from '@/components/ui/KPICard'
import StatusBadge from '@/components/ui/StatusBadge'
import Modal from '@/components/ui/Modal'
import { 
  CreditCardIcon,
  EyeIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  PlusIcon
} from '@heroicons/react/24/outline'

interface Card {
  id: string
  card_number_mask: string
  card_bin: string
  card_type: 'grey' | 'pink'
  exp_month: number
  exp_year: number
  status: string
  account_balance: number
  account_currency: string
  daily_limit: number | null
  bank_account: {
    id: string
    holder_name: string
    currency: string
    bank: {
      name: string
      country: string
    } | null
  }
  casino_assignments: Array<{
    assignment_id: string
    casino_id: string
    casino_name: string
    casino_company?: string
    casino_currency?: string
    assignment_type: string
    status: string
    deposit_amount?: number
    has_deposit: boolean
  }>
}

interface CardRevealData {
  pan: string
  cvv: string
  exp_month: number
  exp_year: number
  mask: string
}

export default function JuniorCardsPage() {
  const { addToast } = useToast()
  const [cards, setCards] = useState<Card[]>([])
  const [allWorks, setAllWorks] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [showRevealModal, setShowRevealModal] = useState(false)
  const [selectedCard, setSelectedCard] = useState<Card | null>(null)
  const [pinCode, setPinCode] = useState('')
  const [revealedData, setRevealedData] = useState<CardRevealData | null>(null)
  const [revealing, setRevealing] = useState(false)
  const [timeLeft, setTimeLeft] = useState(0)

  useEffect(() => {
    loadCards()
  }, [])

  useEffect(() => {
    let interval: NodeJS.Timeout

    if (timeLeft > 0) {
      interval = setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            setRevealedData(null)
            setShowRevealModal(false)
            setPinCode('')
            return 0
          }
          return prev - 1
        })
      }, 1000)
    }

    return () => {
      if (interval) {
        clearInterval(interval)
      }
    }
  }, [timeLeft])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –≤ —Ä–∞–±–æ—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ
  function isCardInUseForCasino(cardId: string, casinoId: string): boolean {
    return allWorks.some(work => {
      if (work.card?.id !== cardId || work.casino?.id !== casinoId) return false
      
      // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ
      if (work.status === 'active') return true
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã - –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–∑–∏–Ω–æ
      const hasActiveWithdrawals = work.withdrawals && work.withdrawals.some((w: any) => 
        ['new', 'waiting', 'received'].includes(w.status)
      )
      
      return hasActiveWithdrawals
    })
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –≤ –ª—é–±–æ–π —Ä–∞–±–æ—Ç–µ (–¥–ª—è –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
  function isCardInUse(cardId: string): boolean {
    return allWorks.some(work => {
      if (work.card?.id !== cardId) return false
      
      // –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      if (work.status === 'active') return true
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã - –∫–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
      const hasActiveWithdrawals = work.withdrawals && work.withdrawals.some((w: any) => 
        ['new', 'waiting', 'received'].includes(w.status)
      )
      
      return hasActiveWithdrawals
    })
  }

  async function loadCards() {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç—ã
      const cardsResponse = await fetch('/api/cards')
      if (!cardsResponse.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç')
      }
      const { cards: cardsData } = await cardsResponse.json()
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–∞—Ä—Ç
      const worksResponse = await fetch('/api/works')
      if (worksResponse.ok) {
        const { works: worksData } = await worksResponse.json()
        setAllWorks(worksData || [])
      }
      
      setCards(cardsData)

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç:', error)
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç',
        description: error.message
      })
    } finally {
      setLoading(false)
    }
  }

  async function handleRevealCard() {
    if (!selectedCard || !pinCode) {
      addToast({ type: 'error', title: '–í–≤–µ–¥–∏—Ç–µ PIN –∫–æ–¥' })
      return
    }

    setRevealing(true)

    try {
      const response = await fetch(`/api/cards/${selectedCard.id}/reveal`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          pin_code: pinCode,
          context: {
            purpose: 'work_creation',
            timestamp: new Date().toISOString()
          }
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error)
      }

      setRevealedData(data.card_data)
      setTimeLeft(data.ttl || 60)
      setPinCode('')

      addToast({
        type: 'success',
        title: '–°–µ–∫—Ä–µ—Ç—ã –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã',
        description: `–î–æ—Å—Ç—É–ø –Ω–∞ ${data.ttl} —Å–µ–∫—É–Ω–¥`
      })

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤:', error)
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ',
        description: error.message
      })
    } finally {
      setRevealing(false)
    }
  }

  function copyToClipboard(text: string, label: string) {
    navigator.clipboard.writeText(text)
    addToast({
      type: 'success',
      title: `${label} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω`,
      description: '–î–∞–Ω–Ω—ã–µ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞'
    })
  }

  const columns: Column<Card>[] = [
    {
      key: 'card_number_mask',
      label: '–ö–∞—Ä—Ç–∞',
      render: (card) => (
        <div>
          <div className="font-mono font-medium text-gray-900">
            {card.card_number_mask}
          </div>
          <div className="text-sm text-gray-500">
            BIN: {card.card_bin} ‚Ä¢ {card.card_type === 'pink' ? 'üå∏ Pink' : '‚ö´ Grey'}
          </div>
        </div>
      )
    },
    {
      key: 'bank_account',
      label: '–ë–∞–Ω–∫',
      render: (card) => (
        <div>
          <div className="font-medium text-gray-900">{card.bank_account?.bank?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫'}</div>
          <div className="text-sm text-gray-500">{card.bank_account?.holder_name}</div>
          <div className="text-xs text-gray-400">{card.bank_account?.bank?.country}</div>
        </div>
      )
    },

    {
      key: 'casino_assignments',
      label: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è',
      render: (card) => {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è –∫–∞–∑–∏–Ω–æ –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        const availableAssignments = card.casino_assignments.filter(assignment => 
          !isCardInUseForCasino(card.id, assignment.casino_id)
        )
        
        return (
          <div>
            {availableAssignments.length > 0 ? (
              <div className="space-y-1">
                {availableAssignments.map((assignment, index) => (
                  <div key={assignment.assignment_id} className="text-sm">
                    <div className="font-medium text-primary-600">
                      {assignment.casino_name}
                    </div>
                    <div className="text-xs text-gray-500">
                      {assignment.assignment_type === 'junior_work' ? 'üéØ –†–∞–±–æ—Ç–∞' : 'üß™ –¢–µ—Å—Ç'}
                      {assignment.has_deposit && ` ‚Ä¢ $${assignment.deposit_amount}`}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <span className="text-sm text-gray-400">
                {card.casino_assignments.length > 0 ? '–í—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ' : '–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π'}
              </span>
            )}
          </div>
        )
      }
    },
    {
      key: 'status',
      label: '–°—Ç–∞—Ç—É—Å',
      render: (card) => <StatusBadge status={card.status} />
    },
    {
      key: 'exp_year',
      label: '–ò—Å—Ç–µ–∫–∞–µ—Ç',
      render: (card) => (
        <span className="text-sm text-gray-600">
          {String(card.exp_month).padStart(2, '0')}/{card.exp_year}
        </span>
      )
    }
  ]

  const actions: ActionButton<Card>[] = [
    {
      label: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã',
      action: (card) => {
        setSelectedCard(card)
        setShowRevealModal(true)
      },
      variant: 'primary',
      condition: (card) => card.status === 'active'
    },
    {
      label: '–°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É',
      action: (card) => {
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        window.location.href = `/dashboard/junior/work/new?card_id=${card.id}`
      },
      variant: 'secondary',
      condition: (card) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Ä–∞–±–æ—Ç–µ)
        const availableAssignments = card.casino_assignments.filter(assignment => 
          !isCardInUseForCasino(card.id, assignment.casino_id)
        )
        return card.status === 'active' && availableAssignments.length > 0
      }
    }
  ]

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã
  const availableCards = cards.filter(c => c.status === 'active')
  
  // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç (–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π)
  // –ö–∞–∂–¥–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ –∫–∞–∑–∏–Ω–æ = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
  const totalAvailableWorks = availableCards.reduce((total, card) => {
    const availableAssignments = card.casino_assignments.filter(assignment => 
      !isCardInUseForCasino(card.id, assignment.casino_id)
    )
    return total + availableAssignments.length
  }, 0)
  
  // –°—á–∏—Ç–∞–µ–º –∫–∞—Ä—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const cardsWithAvailableAssignments = availableCards.filter(c => {
    const availableAssignments = c.casino_assignments.filter(assignment => 
      !isCardInUseForCasino(c.id, assignment.casino_id)
    )
    return availableAssignments.length > 0
  }).length

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">–ú–æ–∏ –∫–∞—Ä—Ç—ã</h1>
        <p className="text-gray-600">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –≤–∞–º</p>
      </div>

      {/* KPI Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <KPICard
          title="–í—Å–µ–≥–æ –∫–∞—Ä—Ç"
          value={cards.length}
          icon={<CreditCardIcon className="h-6 w-6" />}
          color="primary"
        />
        <KPICard
          title="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
          value={totalAvailableWorks}
          icon={<span className="text-xl">üéØ</span>}
          color="primary"
        />
        <KPICard
          title="–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç—ã"
          value={cardsWithAvailableAssignments}
          icon={<CheckCircleIcon className="h-6 w-6" />}
          color="success"
        />
      </div>

      {/* –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ä—Ç */}
      <div className="card">
        <div className="card-header">
          <h3 className="text-lg font-semibold text-gray-900">
            –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã ({availableCards.length})
          </h3>
        </div>
        
        <DataTable
          data={availableCards}
          columns={columns}
          actions={actions}
          loading={loading}
          pagination={{ pageSize: 10 }}
          emptyMessage="–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"
        />
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      {!loading && cards.length === 0 && (
        <div className="card text-center py-12">
          <CreditCardIcon className="h-16 w-16 text-gray-300 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç</h3>
          <p className="text-gray-600 mb-4">
            –ú–µ–Ω–µ–¥–∂–µ—Ä –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–∏–ª –≤–∞–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã.
          </p>
          <p className="text-sm text-gray-500">
            –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
          </p>
        </div>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–∞—Ä—Ç–∞–º–∏ –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π */}
      {!loading && cards.length > 0 && cardsWithAvailableAssignments === 0 && (
        <div className="bg-info-50 border border-info-200 rounded-lg p-4">
          <div className="flex items-start">
            <ExclamationTriangleIcon className="h-5 w-5 text-info-600 mr-2 mt-0.5" />
            <div className="text-sm text-info-800">
              <p className="font-medium">–ö–∞—Ä—Ç—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π</p>
              <p>–£ –≤–∞—Å –µ—Å—Ç—å –∫–∞—Ä—Ç—ã, –Ω–æ –æ–Ω–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∫–∞–∑–∏–Ω–æ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç.</p>
            </div>
          </div>
        </div>
      )}

      {/* Modal –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∫–∞—Ä—Ç—ã */}
      <Modal
        isOpen={showRevealModal}
        onClose={() => {
          setShowRevealModal(false)
          setSelectedCard(null)
          setPinCode('')
          setRevealedData(null)
          setTimeLeft(0)
        }}
        title={`–°–µ–∫—Ä–µ—Ç—ã –∫–∞—Ä—Ç—ã ${selectedCard?.card_number_mask}`}
        size="md"
      >
        <div className="space-y-4">
          {!revealedData ? (
            <>
              <div className="bg-warning-50 border border-warning-200 rounded-lg p-4">
                <div className="flex items-start">
                  <ExclamationTriangleIcon className="h-5 w-5 text-warning-600 mr-2 mt-0.5" />
                  <div className="text-sm text-warning-800">
                    <p className="font-medium">–í–Ω–∏–º–∞–Ω–∏–µ!</p>
                    <p>–°–µ–∫—Ä–µ—Ç—ã –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –Ω–∞ 60 —Å–µ–∫—É–Ω–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ.</p>
                  </div>
                </div>
              </div>

              <div>
                <label className="form-label">PIN –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞</label>
                <input
                  type="password"
                  value={pinCode}
                  onChange={(e) => setPinCode(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ PIN (1234)"
                  maxLength={4}
                />
                <p className="text-xs text-gray-500 mt-1">
                  –í—Ä–µ–º–µ–Ω–Ω—ã–π PIN: 1234 (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±—É–¥–µ—Ç TOTP)
                </p>
              </div>

              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => setShowRevealModal(false)}
                  className="btn-secondary"
                  disabled={revealing}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={handleRevealCard}
                  className="btn-primary"
                  disabled={revealing || !pinCode}
                >
                  {revealing ? '–ü–æ–ª—É—á–µ–Ω–∏–µ...' : '–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ä–µ—Ç—ã'}
                </button>
              </div>
            </>
          ) : (
            <>
              <div className="bg-success-50 border border-success-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-4">
                  <h4 className="font-medium text-success-900">–°–µ–∫—Ä–µ—Ç—ã –∫–∞—Ä—Ç—ã</h4>
                  <div className="flex items-center text-success-700">
                    <ClockIcon className="h-4 w-4 mr-1" />
                    <span className="font-mono">{timeLeft}s</span>
                  </div>
                </div>

                <div className="space-y-3">
                  <div>
                    <label className="text-xs font-medium text-success-800">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</label>
                    <div className="flex items-center space-x-2">
                      <code className="bg-white px-3 py-2 rounded border font-mono text-lg">
                        {revealedData.pan}
                      </code>
                      <button
                        onClick={() => copyToClipboard(revealedData.pan, '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã')}
                        className="btn-secondary text-xs"
                      >
                        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                      </button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="text-xs font-medium text-success-800">CVV</label>
                      <div className="flex items-center space-x-2">
                        <code className="bg-white px-3 py-2 rounded border font-mono">
                          {revealedData.cvv}
                        </code>
                        <button
                          onClick={() => copyToClipboard(revealedData.cvv, 'CVV')}
                          className="btn-secondary text-xs"
                        >
                          –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                        </button>
                      </div>
                    </div>

                    <div>
                      <label className="text-xs font-medium text-success-800">–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</label>
                      <div className="bg-white px-3 py-2 rounded border font-mono">
                        {String(revealedData.exp_month).padStart(2, '0')}/{revealedData.exp_year}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-4 text-xs text-success-700">
                  ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä–æ—é—Ç—Å—è —á–µ—Ä–µ–∑ {timeLeft} —Å–µ–∫—É–Ω–¥
                </div>
              </div>
            </>
          )}
        </div>
      </Modal>
    </div>
  )
}
