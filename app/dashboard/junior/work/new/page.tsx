'use client'

import { useState, useEffect } from 'react'
import { useRouter, useSearchParams } from 'next/navigation'
import { useToast } from '@/components/ui/Toast'
import Modal from '@/components/ui/Modal'
import { 
  BriefcaseIcon,
  CreditCardIcon,
  ComputerDesktopIcon,
  EyeIcon,
  ArrowLeftIcon
} from '@heroicons/react/24/outline'

interface Casino {
  id: string
  name: string
  url: string
  promo?: string
  currency: string
  status: string
  allowed_bins: string[]
  auto_approve_limit: number
}

interface Card {
  id: string
  card_number_mask: string
  card_bin: string
  card_type: string
  status: string
  account_balance: number
  account_currency: string
  bank_account: {
    id: string
    holder_name: string
    currency: string
    bank: {
      name: string
      country: string
    } | null
  }
  casino_assignments: Array<{
    assignment_id: string
    casino_id: string
    casino_name: string
    casino_company?: string
    casino_currency?: string
    assignment_type: string
    status: string
    deposit_amount?: number
    has_deposit: boolean
  }>
}

export default function NewWorkPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const { addToast } = useToast()
  const [casinos, setCasinos] = useState<Casino[]>([])
  const [cards, setCards] = useState<Card[]>([])
  const [loading, setLoading] = useState(true)
  const [creating, setCreating] = useState(false)

  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
  const [workForm, setWorkForm] = useState({
    casino_id: '',
    card_id: '',
    deposit_amount: 0,
    casino_login: '',
    casino_password: '',
    notes: ''
  })

  const [showCardModal, setShowCardModal] = useState(false)
  const [selectedCard, setSelectedCard] = useState<Card | null>(null)

  useEffect(() => {
    loadData()
  }, [])

  async function loadData() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º card_id –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const preselectedCardId = searchParams.get('card_id')

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–∑–∏–Ω–æ
      const casinosResponse = await fetch('/api/casinos?status=approved')
      if (casinosResponse.ok) {
        const { casinos: casinosData } = await casinosResponse.json()
        setCasinos(casinosData.filter((c: Casino) => c.status === 'approved'))
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
      const cardsResponse = await fetch('/api/cards')
      if (cardsResponse.ok) {
        const { cards: cardsData } = await cardsResponse.json()
        const availableCards = cardsData.filter((c: Card) => c.status === 'active')
        setCards(availableCards)

        // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if (preselectedCardId && availableCards.find((c: Card) => c.id === preselectedCardId)) {
          setWorkForm(prev => ({ ...prev, card_id: preselectedCardId }))
          addToast({
            type: 'success',
            title: '–ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞',
            description: '–ö–∞—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –∏–∑ —Å—Å—ã–ª–∫–∏'
          })
        }
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö',
        description: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É'
      })
    } finally {
      setLoading(false)
    }
  }

  async function handleCreateWork() {
    if (!workForm.casino_id || !workForm.card_id || !workForm.deposit_amount) {
      addToast({ type: 'error', title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' })
      return
    }

    if (workForm.deposit_amount <= 0) {
      addToast({ type: 'error', title: '–°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' })
      return
    }

    setCreating(true)

    try {
      const response = await fetch('/api/works', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          casino_id: workForm.casino_id,
          card_id: workForm.card_id,
          deposit_amount: workForm.deposit_amount,
          casino_login: workForm.casino_login,
          casino_password: workForm.casino_password,
          notes: workForm.notes
        })
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error)
      }

      addToast({
        type: 'success',
        title: '–†–∞–±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞',
        description: data.message
      })

      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–∞—à–±–æ—Ä–¥
      router.push('/dashboard/junior')

    } catch (error: any) {
      addToast({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã',
        description: error.message
      })
    } finally {
      setCreating(false)
    }
  }

  function getSelectedCasino() {
    return casinos.find(c => c.id === workForm.casino_id)
  }

  function getSelectedCard() {
    return cards.find(c => c.id === workForm.card_id)
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/3 mb-6"></div>
          <div className="grid grid-cols-2 gap-6">
            <div className="h-64 bg-gray-200 rounded"></div>
            <div className="h-64 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center space-x-4">
        <button
          onClick={() => router.back()}
          className="btn-secondary"
        >
          <ArrowLeftIcon className="h-5 w-5 mr-2" />
          –ù–∞–∑–∞–¥
        </button>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É</h1>
          <p className="text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∑–∏–Ω–æ –∏ –∫–∞—Ä—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞</p>
        </div>
      </div>

      <div className="max-w-2xl">
        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-semibold text-gray-900">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã</h3>
          </div>

          <div className="space-y-4">
            <div>
              <label className="form-label">–ö–∞–∑–∏–Ω–æ *</label>
              <select
                value={workForm.casino_id}
                onChange={(e) => setWorkForm({ ...workForm, casino_id: e.target.value })}
                className="form-input"
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∑–∏–Ω–æ</option>
                {casinos.map(casino => (
                  <option key={casino.id} value={casino.id}>
                    {casino.name}
                  </option>
                ))}
              </select>
              {getSelectedCasino() && (
                <div className="mt-2">
                  <button
                    onClick={() => {
                      const casino = getSelectedCasino()!
                      const promoText = casino.promo || '–ü—Ä–æ–º–æ-–∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'
                      navigator.clipboard.writeText(promoText)
                      addToast({
                        type: 'success',
                        title: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!',
                        description: casino.promo ? '–ü—Ä–æ–º–æ-–∫–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞' : '–ü—Ä–æ–º–æ-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
                      })
                    }}
                    className="btn-secondary text-xs"
                    disabled={!getSelectedCasino()?.promo}
                  >
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ
                  </button>
                </div>
              )}
            </div>

            <div>
              <label className="form-label">–ö–∞—Ä—Ç–∞ *</label>
              <select
                value={workForm.card_id}
                onChange={(e) => setWorkForm({ ...workForm, card_id: e.target.value })}
                className="form-input"
                required
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É</option>
                {cards.map(card => (
                  <option key={card.id} value={card.id}>
                    {card.card_number_mask} - {card.bank_account?.bank?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫'}
                  </option>
                ))}
              </select>
              {getSelectedCard() && (
                <div className="mt-2 text-sm text-gray-600">
                  <div>–¢–∏–ø: {getSelectedCard()!.card_type}</div>
                  <div>–ê–∫–∫–∞—É–Ω—Ç: {getSelectedCard()!.bank_account?.holder_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç'}</div>
                </div>
              )}
            </div>

            <div>
              <label className="form-label">
                –°—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ ({getSelectedCasino()?.currency || '$'}) *
              </label>
              <input
                type="number"
                value={workForm.deposit_amount}
                onChange={(e) => setWorkForm({ ...workForm, deposit_amount: parseFloat(e.target.value) || 0 })}
                className="form-input"
                placeholder="100.00"
                min="1"
                step="0.01"
                required
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="form-label">–õ–æ–≥–∏–Ω –¥–ª—è –∫–∞–∑–∏–Ω–æ</label>
                <input
                  type="text"
                  value={workForm.casino_login}
                  onChange={(e) => setWorkForm({ ...workForm, casino_login: e.target.value })}
                  className="form-input"
                  placeholder="username"
                />
              </div>
              <div>
                <label className="form-label">–ü–∞—Ä–æ–ª—å –¥–ª—è –∫–∞–∑–∏–Ω–æ</label>
                <input
                  type="password"
                  value={workForm.casino_password}
                  onChange={(e) => setWorkForm({ ...workForm, casino_password: e.target.value })}
                  className="form-input"
                  placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                />
              </div>
            </div>

            <div>
              <label className="form-label">–ó–∞–º–µ—Ç–∫–∏</label>
              <textarea
                value={workForm.notes}
                onChange={(e) => setWorkForm({ ...workForm, notes: e.target.value })}
                className="form-input"
                rows={3}
                placeholder="–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∑–∞–º–µ—Ç–∫–∏ –ø–æ —Ä–∞–±–æ—Ç–µ..."
              />
            </div>
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div className="flex justify-end space-x-4">
        <button
          onClick={() => router.push('/dashboard/junior')}
          className="btn-secondary"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
        <button
          onClick={handleCreateWork}
          disabled={creating || !workForm.casino_id || !workForm.card_id || !workForm.deposit_amount}
          className="btn-primary"
        >
          {creating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É'}
        </button>
      </div>

      {/* Modal –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∫–∞—Ä—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) */}
      <Modal
        isOpen={showCardModal}
        onClose={() => {
          setShowCardModal(false)
          setSelectedCard(null)
        }}
        title={`–°–µ–∫—Ä–µ—Ç—ã –∫–∞—Ä—Ç—ã ${selectedCard?.card_number_mask}`}
        size="md"
      >
        <div className="space-y-4">
          <div className="bg-warning-50 border border-warning-200 rounded-lg p-4">
            <div className="text-sm text-warning-800">
              <p className="font-medium">–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>
              <p>–ü–æ–∫–∞–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.</p>
              <p className="mt-2">–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –∫–∞—Ä—Ç—ã" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤.</p>
            </div>
          </div>

          <div className="flex justify-end">
            <button
              onClick={() => setShowCardModal(false)}
              className="btn-secondary"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </div>
      </Modal>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="bg-primary-50 border border-primary-200 rounded-lg p-6">
        <h3 className="font-medium text-primary-900 mb-3">üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã</h3>
        <div className="text-sm text-primary-800 space-y-2">
          <div>1. <strong>–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–µ –∫–∞–∑–∏–Ω–æ</strong> –∏–∑ —Å–ø–∏—Å–∫–∞</div>
          <div>2. <strong>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—É—é –∫–∞—Ä—Ç—É</strong> —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º</div>
          <div>3. <strong>–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞</strong> –¥–ª—è —Ä–∞–±–æ—Ç—ã</div>
          <div>4. <strong>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞</strong> –≤ –∫–∞–∑–∏–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)</div>
          <div>5. <strong>–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É</strong> –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é</div>
        </div>
      </div>
    </div>
  )
}
