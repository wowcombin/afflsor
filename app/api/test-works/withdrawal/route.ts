import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

// POST - –°–æ–∑–¥–∞—Ç—å –≤—ã–≤–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã
export async function POST(request: Request) {
  try {
    const supabase = await createClient()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userData } = await supabase
      .from('users')
      .select('id, role, status')
      .eq('auth_id', user.id)
      .single()

    if (!userData || userData.role !== 'tester') {
      return NextResponse.json({ error: 'Forbidden - —Ç–æ–ª—å–∫–æ Tester –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤—ã–≤–æ–¥—ã' }, { status: 403 })
    }

    const body = await request.json()
    const { work_id, withdrawal_amount, notes } = body

    console.log('üí∞ Creating withdrawal:', {
      work_id,
      withdrawal_amount,
      notes: notes ? 'PROVIDED' : 'EMPTY',
      userRole: userData.role
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!work_id || !withdrawal_amount || withdrawal_amount <= 0) {
      return NextResponse.json({ error: '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ—Å—Ç–µ—Ä—É
    const { data: work, error: workError } = await supabase
      .from('casino_tests')
      .select('id, casino_id, status, deposit_amount, withdrawal_amount, tester_id')
      .eq('id', work_id)
      .eq('tester_id', userData.id)
      .single()

    if (workError || !work) {
      console.error('‚ùå Work not found:', { work_id, workError })
      return NextResponse.json({ error: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    console.log('üîç Found work for withdrawal:', {
      workId: work.id,
      status: work.status,
      withdrawal_amount: work.withdrawal_amount,
      tester_id: work.tester_id,
      current_user: userData.id
    })

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤—ã–≤–æ–¥—ã)
    console.log('‚úÖ Creating new withdrawal in test_withdrawals table')

    const { data: newWithdrawal, error: withdrawalError } = await supabase
      .from('test_withdrawals')
      .insert({
        work_id: work_id,
        withdrawal_amount: parseFloat(withdrawal_amount),
        withdrawal_status: 'new',
        withdrawal_notes: notes || null,
        requested_at: new Date().toISOString()
      })
      .select()
      .single()

    if (withdrawalError) {
      console.error('‚ùå Withdrawal creation error:', withdrawalError)
      return NextResponse.json({ error: withdrawalError.message }, { status: 500 })
    }

    console.log('‚úÖ Withdrawal created successfully:', {
      workId: work_id,
      amount: withdrawal_amount,
      status: 'new'
    })

    return NextResponse.json({
      success: true,
      withdrawal: newWithdrawal,
      message: `–í—ã–≤–æ–¥ $${withdrawal_amount} —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–ù–æ–≤—ã–π"`
    })

  } catch (error) {
    console.error('Create withdrawal error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
