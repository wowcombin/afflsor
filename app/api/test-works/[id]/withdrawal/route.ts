import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

// PATCH - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
export async function PATCH(request: Request, { params }: { params: { id: string } }) {
  try {
    const supabase = await createClient()
    const { id: workId } = params
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userData } = await supabase
      .from('users')
      .select('id, role, status')
      .eq('auth_id', user.id)
      .single()

    if (!userData || userData.role !== 'tester') {
      return NextResponse.json({ error: 'Forbidden - —Ç–æ–ª—å–∫–æ Tester –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—ã–≤–æ–¥–æ–≤' }, { status: 403 })
    }

    const body = await request.json()
    const { withdrawal_status } = body

    console.log('üîÑ Updating withdrawal status:', {
      workId,
      newStatus: withdrawal_status,
      userRole: userData.role
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞
    const validStatuses = ['new', 'waiting', 'received', 'blocked']
    if (!validStatuses.includes(withdrawal_status)) {
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞' }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ—Å—Ç–µ—Ä—É
    const { data: work, error: workError } = await supabase
      .from('casino_tests')
      .select('id, withdrawal_amount, withdrawal_status, tester_id')
      .eq('id', workId)
      .eq('tester_id', userData.id)
      .single()

    if (workError || !work) {
      console.error('‚ùå Work not found:', { workId, workError })
      return NextResponse.json({ error: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    if (!work.withdrawal_amount) {
      return NextResponse.json({ error: '–î–ª—è —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω –≤—ã–≤–æ–¥' }, { status: 400 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
    const { data: updatedWork, error: updateError } = await supabase
      .from('casino_tests')
      .update({
        withdrawal_status: withdrawal_status,
        updated_at: new Date().toISOString()
      })
      .eq('id', workId)
      .select()
      .single()

    if (updateError) {
      console.error('‚ùå Update error:', updateError)
      return NextResponse.json({ error: updateError.message }, { status: 500 })
    }

    console.log('‚úÖ Withdrawal status updated:', {
      workId,
      oldStatus: work.withdrawal_status,
      newStatus: withdrawal_status
    })

    const statusMessages = {
      'new': '–ù–æ–≤—ã–π',
      'waiting': '–í –æ–∂–∏–¥–∞–Ω–∏–∏',
      'received': '–ü–æ–ª—É—á–µ–Ω',
      'blocked': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    }

    return NextResponse.json({
      success: true,
      work: updatedWork,
      message: `–°—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${statusMessages[withdrawal_status as keyof typeof statusMessages]}"`
    })

  } catch (error) {
    console.error('Update withdrawal status error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
