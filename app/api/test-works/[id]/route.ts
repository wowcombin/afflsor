import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

// PATCH - –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É (—Ä–µ–π—Ç–∏–Ω–≥, —Å—Ç–∞—Ç—É—Å –∏ —Ç.–¥.)
export async function PATCH(request: Request, { params }: { params: { id: string } }) {
  try {
    const supabase = await createClient()
    const { id: workId } = params
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userData } = await supabase
      .from('users')
      .select('id, role, status')
      .eq('auth_id', user.id)
      .single()

    if (!userData || userData.role !== 'tester') {
      return NextResponse.json({ error: 'Forbidden - —Ç–æ–ª—å–∫–æ Tester –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–∞–±–æ—Ç—ã' }, { status: 403 })
    }

    const body = await request.json()
    const { rating, status, withdrawal_time } = body

    console.log('üìù Updating test work:', {
      workId,
      updates: { rating, status, withdrawal_time },
      userRole: userData.role
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ—Å—Ç–µ—Ä—É
    const { data: work, error: workError } = await supabase
      .from('casino_tests')
      .select('id, tester_id')
      .eq('id', workId)
      .eq('tester_id', userData.id)
      .single()

    if (workError || !work) {
      console.error('‚ùå Work not found:', { workId, workError })
      return NextResponse.json({ error: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData: any = {}
    if (rating !== undefined) updateData.rating = rating
    if (status !== undefined) updateData.status = status
    if (withdrawal_time !== undefined) updateData.withdrawal_time = withdrawal_time
    updateData.updated_at = new Date().toISOString()

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—Ç—É
    const { data: updatedWork, error: updateError } = await supabase
      .from('casino_tests')
      .update(updateData)
      .eq('id', workId)
      .select()
      .single()

    if (updateError) {
      console.error('‚ùå Update error:', updateError)
      return NextResponse.json({ error: updateError.message }, { status: 500 })
    }

    console.log('‚úÖ Test work updated successfully:', { workId, updateData })

    return NextResponse.json({
      success: true,
      work: updatedWork,
      message: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
    })

  } catch (error) {
    console.error('Update test work error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// DELETE - –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞–±–æ—Ç—É
export async function DELETE(request: Request, { params }: { params: { id: string } }) {
  try {
    const supabase = await createClient()
    const { id: workId } = params
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userData } = await supabase
      .from('users')
      .select('id, role, status')
      .eq('auth_id', user.id)
      .single()

    if (!userData || userData.role !== 'tester') {
      return NextResponse.json({ error: 'Forbidden - —Ç–æ–ª—å–∫–æ Tester –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ä–∞–±–æ—Ç—ã' }, { status: 403 })
    }

    console.log('üóëÔ∏è Deleting test work:', {
      workId,
      userRole: userData.role
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–±–æ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ—Å—Ç–µ—Ä—É
    const { data: work, error: workError } = await supabase
      .from('casino_tests')
      .select('id, tester_id, status')
      .eq('id', workId)
      .eq('tester_id', userData.id)
      .single()

    if (workError || !work) {
      console.error('‚ùå Work not found:', { workId, workError })
      return NextResponse.json({ error: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    // –£–¥–∞–ª—è–µ–º —Ä–∞–±–æ—Ç—É
    const { error: deleteError } = await supabase
      .from('casino_tests')
      .delete()
      .eq('id', workId)

    if (deleteError) {
      console.error('‚ùå Delete error:', deleteError)
      return NextResponse.json({ error: deleteError.message }, { status: 500 })
    }

    console.log('‚úÖ Test work deleted successfully:', { workId })

    return NextResponse.json({
      success: true,
      message: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞'
    })

  } catch (error) {
    console.error('Delete test work error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
