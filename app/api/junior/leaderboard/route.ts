import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export const dynamic = 'force-dynamic'

// –§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
function convertToUSDSync(amount: number, currency: string, rates: any): number {
  const rate = rates[currency] || 1
  return amount * rate
}

export async function GET(request: NextRequest) {
  try {
    const supabase = await createClient()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('Junior Leaderboard API called:', { user: user.email })

    const { data: userData } = await supabase
      .from('users')
      .select('id, role, status')
      .eq('auth_id', user.id)
      .single()

    if (!userData || userData.status !== 'active' || userData.role !== 'junior') {
      return NextResponse.json({ error: 'Access denied - —Ç–æ–ª—å–∫–æ –¥–ª—è Junior' }, { status: 403 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { searchParams } = new URL(request.url)
    const period = searchParams.get('period') || 'current_month' // current_month, last_month, all_time

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    let startDate: Date
    let endDate: Date
    const now = new Date()

    switch (period) {
      case 'last_month':
        startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1)
        endDate = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59)
        break
      case 'all_time':
        startDate = new Date(2024, 0, 1) // –ù–∞—á–∞–ª–æ 2024 –≥–æ–¥–∞
        endDate = now
        break
      case 'current_month':
      default:
        startDate = new Date(now.getFullYear(), now.getMonth(), 1)
        endDate = now
        break
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Junior'–æ–≤
    const { data: allJuniors, error: juniorsError } = await supabase
      .from('users')
      .select(`
        id,
        first_name,
        last_name,
        email,
        created_at,
        salary_percentage
      `)
      .eq('role', 'junior')
      .eq('status', 'active')

    if (juniorsError) {
      console.error('Error fetching juniors:', juniorsError)
      return NextResponse.json({ error: 'Database error' }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const { data: works, error: worksError } = await supabase
      .from('works')
      .select(`
        id,
        junior_id,
        deposit_amount,
        created_at,
        casinos (
          id,
          name,
          currency
        )
      `)
      .gte('created_at', startDate.toISOString())
      .lte('created_at', endDate.toISOString())

    if (worksError) {
      console.error('Error fetching works:', worksError)
      return NextResponse.json({ error: 'Database error' }, { status: 500 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—ã–≤–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const workIds = works?.map(w => w.id) || []
    let withdrawals: any[] = []
    
    if (workIds.length > 0) {
      const { data: withdrawalsData, error: withdrawalsError } = await supabase
        .from('work_withdrawals')
        .select(`
          id,
          work_id,
          withdrawal_amount,
          status,
          created_at
        `)
        .in('work_id', workIds)
        .eq('status', 'received') // –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –≤—ã–≤–æ–¥—ã

      if (withdrawalsError) {
        console.error('Error fetching withdrawals:', withdrawalsError)
        return NextResponse.json({ error: 'Database error' }, { status: 500 })
      }

      withdrawals = withdrawalsData || []
    }

    // –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ)
    const rates = {
      'USD': 1.0,
      'EUR': 1.09,
      'GBP': 1.27,
      'CAD': 0.74
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Junior'–∞
    const juniorStats = allJuniors?.map(junior => {
      const juniorWorks = works?.filter(w => w.junior_id === junior.id) || []
      const juniorWithdrawals = withdrawals.filter(w => 
        juniorWorks.some(work => work.id === w.work_id)
      )

      let totalProfit = 0
      let totalDeposits = 0
      let totalWithdrawals = 0
      let successfulWorks = 0
      let biggestWin = 0
      let biggestWinCasino = ''

      juniorWorks.forEach(work => {
        const workWithdrawals = juniorWithdrawals.filter(w => w.work_id === work.id)
        const currency = (work.casinos as any)?.currency || 'USD'
        const depositUSD = convertToUSDSync(work.deposit_amount, currency, rates)
        
        totalDeposits += depositUSD

        if (workWithdrawals.length > 0) {
          successfulWorks++
          
          workWithdrawals.forEach(withdrawal => {
            const withdrawalUSD = convertToUSDSync(withdrawal.withdrawal_amount, currency, rates)
            totalWithdrawals += withdrawalUSD
            
            const workProfit = withdrawalUSD - depositUSD
            totalProfit += workProfit
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –≤—ã–∏–≥—Ä—ã—à
            if (workProfit > biggestWin) {
              biggestWin = workProfit
              biggestWinCasino = (work.casinos as any)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–∞–∑–∏–Ω–æ'
            }
          })
        }
      })

      const totalWorks = juniorWorks.length
      const successRate = totalWorks > 0 ? (successfulWorks / totalWorks) * 100 : 0
      const avgProfitPerWork = successfulWorks > 0 ? totalProfit / successfulWorks : 0

      return {
        id: junior.id,
        name: `${junior.first_name || ''} ${junior.last_name || ''}`.trim() || junior.email,
        email: junior.email,
        totalProfit: Math.round(totalProfit * 100) / 100,
        totalWorks,
        successfulWorks,
        successRate: Math.round(successRate * 100) / 100,
        avgProfitPerWork: Math.round(avgProfitPerWork * 100) / 100,
        biggestWin: Math.round(biggestWin * 100) / 100,
        biggestWinCasino,
        salaryPercentage: junior.salary_percentage || 10,
        estimatedEarnings: Math.round(totalProfit * (junior.salary_percentage || 10) / 100 * 100) / 100,
        joinedDate: junior.created_at,
        isCurrentUser: junior.id === userData.id
      }
    }) || []

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ—Ñ–∏—Ç—É
    juniorStats.sort((a, b) => b.totalProfit - a.totalProfit)

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    juniorStats.forEach((junior, index) => {
      (junior as any).rank = index + 1
    })

    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalCompanyProfit = juniorStats.reduce((sum, j) => sum + j.totalProfit, 0)
    const totalCompanyWorks = juniorStats.reduce((sum, j) => sum + j.totalWorks, 0)
    const totalSuccessfulWorks = juniorStats.reduce((sum, j) => sum + j.successfulWorks, 0)
    const avgCompanySuccessRate = totalCompanyWorks > 0 ? (totalSuccessfulWorks / totalCompanyWorks) * 100 : 0

    // –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥–µ—Ä–∞ –º–µ—Å—è—Ü–∞
    const monthLeader = juniorStats[0] || null

    // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const motivationalMessages = [
      "üöÄ –ö–∞–∂–¥–∞—è —Ä–∞–±–æ—Ç–∞ - —ç—Ç–æ —à–∞–≥ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ!",
      "üí∞ –¢–≤–æ–π —É—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–≤–æ–∏—Ö —É—Å–∏–ª–∏–π!",
      "üèÜ –°—Ç–∞–Ω—å –ª–∏–¥–µ—Ä–æ–º –º–µ—Å—è—Ü–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!",
      "‚ö° –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–±–æ—Ç–∞–µ—à—å, —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å!",
      "üéØ –ü–æ—Å—Ç–∞–≤—å —Ü–µ–ª—å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏ –µ—ë!",
      "üí™ –£–ø–æ—Ä—Å—Ç–≤–æ –∏ —Ç—Ä—É–¥ –≤—Å—ë –ø–µ—Ä–µ—Ç—Ä—É—Ç!",
      "üåü –¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å!",
      "üî• –ó–∞–∂–≥–∏ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —Å–≤–æ–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!"
    ]

    const randomMessage = motivationalMessages[Math.floor(Math.random() * motivationalMessages.length)]

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–µ–π–¥–∂–∏
    const achievements = []
    const currentUser = juniorStats.find(j => j.isCurrentUser)
    
    if (currentUser) {
      const userRank = (currentUser as any).rank
      if (userRank === 1) achievements.push({ title: "üëë –õ–∏–¥–µ—Ä –º–µ—Å—è—Ü–∞", description: "–ü–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!" })
      if (userRank <= 3) achievements.push({ title: "ü•â –¢–æ–ø-3", description: "–í —Ç—Ä–æ–π–∫–µ –ª—É—á—à–∏—Ö!" })
      if (currentUser.successRate >= 80) achievements.push({ title: "üéØ –°–Ω–∞–π–ø–µ—Ä", description: "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å 80%+" })
      if (currentUser.totalWorks >= 50) achievements.push({ title: "üî• –¢—Ä—É–¥—è–≥–∞", description: "50+ —Ä–∞–±–æ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥" })
      if (currentUser.biggestWin >= 1000) achievements.push({ title: "üíé –ö—Ä—É–ø–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à", description: "–í—ã–∏–≥—Ä—ã—à $1000+" })
    }

    return NextResponse.json({
      success: true,
      period,
      leaderboard: juniorStats,
      companyStats: {
        totalProfit: Math.round(totalCompanyProfit * 100) / 100,
        totalWorks: totalCompanyWorks,
        avgSuccessRate: Math.round(avgCompanySuccessRate * 100) / 100,
        activeJuniors: juniorStats.length
      },
      monthLeader,
      motivationalMessage: randomMessage,
      achievements,
      currentUserRank: (currentUser as any)?.rank || null
    })

  } catch (error) {
    console.error('Junior Leaderboard API Error:', error)
    return NextResponse.json({ 
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}
