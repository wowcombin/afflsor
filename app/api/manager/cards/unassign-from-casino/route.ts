import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

// POST - –û—Ç–æ–∑–≤–∞—Ç—å –∫–∞—Ä—Ç—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–∑–∏–Ω–æ
export async function POST(request: Request) {
  try {
    const supabase = await createClient()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Ä–æ–ª–∏
    const { data: { user } } = await supabase.auth.getUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: userData } = await supabase
      .from('users')
      .select('id, role, status')
      .eq('auth_id', user.id)
      .single()

    if (!userData || userData.status !== 'active' || userData.role !== 'manager') {
      return NextResponse.json({ error: 'Access denied' }, { status: 403 })
    }

    const body = await request.json()
    const { card_id, casino_id } = body

    if (!card_id || !casino_id) {
      return NextResponse.json({ error: 'Card ID and Casino ID are required' }, { status: 400 })
    }

    console.log('üéØ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤ –∫–∞—Ä—Ç—ã —Å –∫–∞–∑–∏–Ω–æ:', {
      card_id,
      casino_id,
      manager_id: userData.id
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: card, error: cardError } = await supabase
      .from('cards')
      .select(`
        id,
        card_number_mask,
        assigned_to,
        assigned_user:users!cards_assigned_to_fkey (
          id, first_name, last_name, email
        )
      `)
      .eq('id', card_id)
      .single()

    if (cardError || !card) {
      return NextResponse.json({ error: 'Card not found' }, { status: 404 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∑–∏–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const { data: casino, error: casinoError } = await supabase
      .from('casinos')
      .select('id, name, company')
      .eq('id', casino_id)
      .single()

    if (casinoError || !casino) {
      return NextResponse.json({ error: 'Casino not found' }, { status: 404 })
    }

    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –Ω–∞ —ç—Ç–æ –∫–∞–∑–∏–Ω–æ
    const { data: casinoAssignment, error: assignmentError } = await supabase
      .from('card_casino_assignments')
      .select('*')
      .eq('card_id', card_id)
      .eq('casino_id', casino_id)
      .eq('status', 'active')
      .single()

    if (assignmentError || !casinoAssignment) {
      return NextResponse.json({ 
        error: 'No active assignment found for this card and casino' 
      }, { status: 404 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞–∑–∏–Ω–æ –Ω–∞ 'completed'
    const { error: updateCasinoError } = await supabase
      .from('card_casino_assignments')
      .update({
        status: 'completed',
        updated_at: new Date().toISOString()
      })
      .eq('id', casinoAssignment.id)

    if (updateCasinoError) {
      console.error('Error updating casino assignment:', updateCasinoError)
      return NextResponse.json({ error: 'Failed to unassign from casino' }, { status: 500 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞–∑–∏–Ω–æ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã
    const { data: otherAssignments, error: otherError } = await supabase
      .from('card_casino_assignments')
      .select('id')
      .eq('card_id', card_id)
      .eq('status', 'active')

    if (otherError) {
      console.error('Error checking other assignments:', otherError)
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –∫–∞–∑–∏–Ω–æ, —É–±–∏—Ä–∞–µ–º –æ–±—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    if (!otherAssignments || otherAssignments.length === 0) {
      const { error: cardUpdateError } = await supabase
        .from('cards')
        .update({
          assigned_to: null,
          assigned_at: null,
          updated_at: new Date().toISOString()
        })
        .eq('id', card_id)

      if (cardUpdateError) {
        console.error('Error updating card assignment:', cardUpdateError)
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—â–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ 'completed'
      const { error: generalAssignmentError } = await supabase
        .from('card_assignments')
        .update({
          status: 'completed',
          completed_at: new Date().toISOString()
        })
        .eq('card_id', card_id)
        .eq('status', 'active')

      if (generalAssignmentError) {
        console.error('Error updating general assignment:', generalAssignmentError)
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await supabase
      .from('action_history')
      .insert({
        action_type: 'unassign',
        entity_type: 'card',
        entity_id: card_id,
        entity_name: `Card ${card.card_number_mask} unassigned from ${casino.name}`,
        change_description: `Manager unassigned card from casino ${casino.name}`,
        performed_by: userData.id,
        old_values: { 
          casino_id,
          casino_name: casino.name,
          assigned_to: card.assigned_to
        }
      })

    const response = {
      success: true,
      message: `–ö–∞—Ä—Ç–∞ ${card.card_number_mask} –æ—Ç–æ–∑–≤–∞–Ω–∞ —Å –∫–∞–∑–∏–Ω–æ ${casino.name}`,
      card_id,
      casino_id,
      casino_name: casino.name,
      unassigned_at: new Date().toISOString()
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('Card unassign from casino error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}
