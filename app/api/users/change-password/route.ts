import { createClient, createAdminClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

// POST - –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function POST(request: Request) {
  try {
    const supabase = await createClient()
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json({ 
        error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
        details: authError?.message 
      }, { status: 401 })
    }

    const body = await request.json()
    const { currentPassword, newPassword } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!currentPassword || !newPassword) {
      return NextResponse.json({ 
        error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
        details: '–¢–µ–∫—É—â–∏–π –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
      }, { status: 400 })
    }

    if (newPassword.length < 6) {
      return NextResponse.json({ 
        error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π',
        details: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
      }, { status: 400 })
    }

    console.log('üîê Password change request:', {
      userId: user.id,
      email: user.email,
      newPasswordLength: newPassword.length
    })

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—ã—Ç–∞–≤—à–∏—Å—å –≤–æ–π—Ç–∏ —Å –Ω–∏–º
    const testClient = await createClient()
    const { error: signInError } = await testClient.auth.signInWithPassword({
      email: user.email || '',
      password: currentPassword
    })

    if (signInError) {
      console.error('Current password verification failed:', signInError)
      return NextResponse.json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å',
        details: '–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç'
      }, { status: 400 })
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º admin –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    const adminSupabase = createAdminClient()
    
    const { error: updateError } = await adminSupabase.auth.admin.updateUserById(
      user.id,
      { password: newPassword }
    )

    if (updateError) {
      console.error('Password update error:', updateError)
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è',
        details: updateError.message
      }, { status: 500 })
    }

    console.log('‚úÖ Password updated successfully for:', user.email)

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ
    const { error: timestampError } = await supabase
      .from('users')
      .update({ 
        updated_at: new Date().toISOString()
      })
      .eq('auth_id', user.id)

    if (timestampError) {
      console.error('Timestamp update error:', timestampError)
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä–æ–ª—å —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω
    }

    return NextResponse.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω'
    })

  } catch (error: any) {
    console.error('Change password API error:', error)
    return NextResponse.json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    }, { status: 500 })
  }
}
