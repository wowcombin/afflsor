import { createClient } from '@/lib/supabase/server'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

// –°–û–í–ï–†–®–ï–ù–ù–û –ù–û–í–´–ô API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
export async function POST(request: Request) {
    const startTime = Date.now()

    try {
        console.log('üî•üî•üî• –ù–û–í–ï–ô–®–ò–ô API create-user-test –ó–ê–ü–£–©–ï–ù!', {
            timestamp: new Date().toISOString(),
            version: 'v3.0-completely-new'
        })

        const supabase = await createClient()

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        const { data: { user }, error: authError } = await supabase.auth.getUser()

        console.log('‚úÖ Auth check:', {
            hasUser: !!user,
            userEmail: user?.email,
            authError: authError?.message
        })

        if (!user) {
            return NextResponse.json({
                error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                version: 'v3.0-completely-new',
                step: 'auth_check'
            }, { status: 401 })
        }

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: userData, error: userError } = await supabase
            .from('users')
            .select('id, email, role, status')
            .eq('auth_id', user.id)
            .single()

        console.log('‚úÖ User data check:', {
            userData,
            userError: userError?.message,
            hasUserData: !!userData
        })

        if (userError) {
            return NextResponse.json({
                error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                details: userError.message,
                version: 'v3.0-completely-new',
                step: 'user_data_fetch'
            }, { status: 500 })
        }

        if (!userData) {
            return NextResponse.json({
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ',
                version: 'v3.0-completely-new',
                step: 'user_not_found'
            }, { status: 404 })
        }

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
        const allowedRoles = ['hr', 'admin', 'manager']
        const hasPermission = allowedRoles.includes(userData.role)

        console.log('‚úÖ Permission check:', {
            userRole: userData.role,
            allowedRoles,
            hasPermission,
            isActive: userData.status === 'active'
        })

        if (!hasPermission) {
            return NextResponse.json({
                error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
                details: `–†–æ–ª—å '${userData.role}' –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù—É–∂–Ω–∞ —Ä–æ–ª—å: ${allowedRoles.join(', ')}`,
                version: 'v3.0-completely-new',
                step: 'permission_check',
                userRole: userData.role
            }, { status: 403 })
        }

        if (userData.status !== 'active') {
            return NextResponse.json({
                error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω',
                details: `–°—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: '${userData.status}', —Ç—Ä–µ–±—É–µ—Ç—Å—è: 'active'`,
                version: 'v3.0-completely-new',
                step: 'status_check'
            }, { status: 403 })
        }

        // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const body = await request.json()
        console.log('‚úÖ Request body:', body)

        const { email, password, first_name, last_name, role } = body

        if (!email || !password || !role) {
            return NextResponse.json({
                error: '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
                details: 'Email, –ø–∞—Ä–æ–ª—å –∏ —Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã',
                version: 'v3.0-completely-new',
                step: 'validation'
            }, { status: 400 })
        }

        // 5. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Auth
        console.log('üöÄ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase Auth...')

        const { data: authUser, error: authCreateError } = await supabase.auth.admin.createUser({
            email,
            password,
            email_confirm: true
        })

        if (authCreateError) {
            console.error('‚ùå Auth creation error:', authCreateError)
            return NextResponse.json({
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞',
                details: authCreateError.message,
                version: 'v3.0-completely-new',
                step: 'auth_creation'
            }, { status: 400 })
        }

        if (!authUser.user) {
            return NextResponse.json({
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
                version: 'v3.0-completely-new',
                step: 'auth_user_missing'
            }, { status: 500 })
        }

        console.log('‚úÖ Auth user created:', authUser.user.id)

        // 6. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users
        console.log('üöÄ –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ users...')

        const { data: newUser, error: insertError } = await supabase
            .from('users')
            .insert({
                auth_id: authUser.user.id,
                email,
                first_name: first_name || null,
                last_name: last_name || null,
                role,
                status: 'active'
            })
            .select()
            .single()

        if (insertError) {
            console.error('‚ùå User insert error:', insertError)
            // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await supabase.auth.admin.deleteUser(authUser.user.id)

            return NextResponse.json({
                error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ',
                details: insertError.message,
                version: 'v3.0-completely-new',
                step: 'user_insert'
            }, { status: 500 })
        }

        console.log('‚úÖ User created successfully:', newUser)

        const endTime = Date.now()

        return NextResponse.json({
            success: true,
            message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`,
            user: newUser,
            version: 'v3.0-completely-new',
            executionTime: `${endTime - startTime}ms`,
            timestamp: new Date().toISOString()
        })

    } catch (error: any) {
        console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
        return NextResponse.json({
            error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            details: error.message,
            version: 'v3.0-completely-new',
            step: 'catch_block'
        }, { status: 500 })
    }
}
